{
  
    
        "post0": {
            "title": "Javascript Notebook",
            "content": "function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } //creation of Person function, class object, and JSON //this refers to an object function Person(name, grade, ghID, icon, role) { this.name = name; this.grade = grade; this.ghID = ghID; this.icon = icon; this.role = &quot;&quot;; } // setter for icon in Person data Person.prototype.setRole = function(role){ this.role = role; } //defines JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function(){ const obj = {name: this.name, grade: this.grade, ghID: this.ghID, icon: this.icon, role: this.role}; const json = JSON.stringify(obj); //useful to pass data on internet return json; } var teacher = new Person(&quot;Mr. M&quot;, &quot;0&quot;, &quot;jm1021&quot;, &quot;Owl&quot;) var students = [ new Person(&quot;Calissa&quot;, &quot;12&quot;, &quot;CalissaT&quot;, &quot;Pink Bird&quot;), new Person(&quot;Evan&quot;, &quot;12&quot;, &quot;deimie&quot;, &quot;Blue Bird&quot;), new Person(&quot;Samuel&quot;, &quot;12&quot;, &quot;Samuelwaang&quot;, &quot;Orange Bird&quot;), new Person(&quot;Kian&quot;, &quot;12&quot;, &quot;kiannp44&quot;, &quot;Yellow Bird&quot;), new Person(&quot;Mr. M Jr&quot;, &quot;12&quot;, &quot;Mrmjr123&quot;, &quot;Brown Bird&quot;), ]; function Classroom(teacher, students){ //classroom starts with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; //students are added this.students = students; this.students.forEach(student =&gt; {student.setRole(&quot;Student&quot;); this.classroom.push(student); }); //json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object . object ; [ Person { name: &#39;Mr. M&#39;, grade: &#39;0&#39;, ghID: &#39;jm1021&#39;, icon: &#39;Owl&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Calissa&#39;, grade: &#39;12&#39;, ghID: &#39;CalissaT&#39;, icon: &#39;Pink Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Evan&#39;, grade: &#39;12&#39;, ghID: &#39;deimie&#39;, icon: &#39;Blue Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Samuel&#39;, grade: &#39;12&#39;, ghID: &#39;Samuelwaang&#39;, icon: &#39;Orange Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Kian&#39;, grade: &#39;12&#39;, ghID: &#39;kiannp44&#39;, icon: &#39;Yellow Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Mr. M Jr&#39;, grade: &#39;12&#39;, ghID: &#39;Mrmjr123&#39;, icon: &#39;Brown Bird&#39;, role: &#39;Student&#39; } ] . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em lightseagreen;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Icon&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].icon + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGradeGitHub IDIconRole . Mr. M | 0 | jm1021 | Owl | Teacher | Calissa | 12 | CalissaT | Pink Bird | Student | Evan | 12 | deimie | Blue Bird | Student | Samuel | 12 | Samuelwaang | Orange Bird | Student | Kian | 12 | kiannp44 | Yellow Bird | Student | Mr. M Jr | 12 | Mrmjr123 | Brown Bird | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://calissat.github.io/ws/javascript/2022/09/25/javascript.html",
            "relUrl": "/javascript/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fibonacci",
            "content": "import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/22/fibonacci.html",
            "relUrl": "/java/labs/2022/09/22/fibonacci.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "FRQs",
            "content": "2019 FRQ 1 - Methods and Control Structures . I used the website Link to run my code and check if it passed. This website has good resources for APCSA prompts . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. public class APCalendar { / Returns true if year is a leap year and false otherwise. / private static boolean isLeapYear(int year) { / implementation not shown */ } / Returns the number of leap years between year1 and year2, inclusive. Precondition: 0 &lt;= year1 &lt;= year2 / public static int numberOfLeapYears(int year1, int year2) { / to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, | where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. / private static int firstDayOfYear(int year) { / implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. | Returns 1 for January 1 (month = 1, day = 1) of any year. | Precondition: The date represented by month, day, year is a valid date. / private static int dayOfYear(int month, int day, int year) { / implementation not shown */ } /** Returns the value representing the day of the week for the given date | (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. / public static int dayOfWeek(int month, int day, int year) { / to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } | . | Part A . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ . public static int numberOfLeapYears(int year1, int year2) . | . //PART A import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int numLeapYears = 0; for(int i =year1 ; i &lt;= year2; i++ ){ //loops while i (year1) &lt;= year2 if (isLeapYear(i)){ numLeapYears = numLeapYears + 1; //adds one every time there is a leap year } else { //else does nothing } } return numLeapYears; } /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { return new GregorianCalendar().isLeapYear(year); } public static void main(String[] args) { int answer = APCalendar.numberOfLeapYears(2000, 2050); System.out.println(&quot;Your answer should be 13: &quot; + answer); } } . Part B . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int divisor = 7; /* divides by seven and uses remainder to determine what day of the week it is int day1 = 7; //sunday int day2 = 8; //monday int day3 = 9; //tuesday */ int daysIntoYear = firstDayOfYear(year) + dayOfYear(month, day, year) -1; /* Adds the first day of the year, and then how many days its been in the year. Then, you must subtract 1 since day of year includes the first day, so it would be an extra day */ int dayOfWeek = daysIntoYear % divisor; return dayOfWeek; } public static void main(String[] args) { int answer = APCalendar.dayOfWeek(1, 8, 2019); System.out.println(&quot;Your answer should be 2: &quot; + answer); } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { GregorianCalendar gc = new GregorianCalendar(year, Calendar.JANUARY, 1); return gc.get(Calendar.DAY_OF_WEEK) - 1; } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { GregorianCalendar gc = new GregorianCalendar(year, month - 1, day); return gc.get(Calendar.DAY_OF_YEAR); } } /* * Should return 13. */ .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/19/frqs.html",
            "relUrl": "/java/labs/2022/09/19/frqs.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Array",
            "content": "Fish Poem . class fishLoop{ String [][] fish; public fishLoop(){ fish = new String[][]{ // 1 fish { &quot; One Fish &quot;, //[0][0] &quot; _///_ &quot;, //[0][1] &quot; /o |/ &quot;, //[0][2] &quot; &gt; ))_.|- &quot;, //[0][3] &quot; &lt; &quot; //[0][4] }, // 2 fish { &quot; Two Fish &quot;, //[1][0] &quot; .-=-. , &quot;, //[1][1] &quot;(o &gt;&lt; &quot;, //[1][2] &quot; `-=-&#39; ` &quot;, //[1][3] &quot; /// &quot; //[1][4] }, // red fish { &quot; Red Fish &quot;, //[2][0] &quot; . )| &quot;, //[2][1] &quot; |`.-&#39; `-oo &quot;, //[2][2] &quot; ) _ __,0)&quot;, //[2][3] &quot; /.&#39; )/ &quot; //[2][4] }, //blue fish { &quot; Blue Fish &quot;, //[3][0] &quot; )| &quot;, //[3][1] &quot; .- -. &quot;, //[3][2] &quot; )|| (( o ) &quot;, //[3][3] &quot; )/&#39;&#39;&#39;--&#39; &quot; , //[3][4] }, }; } public void printFish(){ System.out.println(); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); System.out.println(&quot;Under the sea there are...&quot;); int count = 4; for (int row = 0;row &lt; count; row++){ for (int col = 0; col &lt; fish[row].length; col++){ System.out.print(fish[row][col] + &quot; &quot;); System.out.println(); } } count -= 1; } public static void main(String[] args) { new fishLoop().printFish(); } } fishLoop.main(null); . ~~~~~~~~~~~~~~~~~~~~~~~~~~ Under the sea there are... One Fish _///_ /o |/ &gt; ))_.|- &lt; Two Fish .-=-. , (o &gt;&lt; `-=-&#39; ` /// Red Fish . )| |`.-&#39; `-oo ) _ __,0) /.&#39; )/ Blue Fish )| .- -. )|| (( o ) )/&#39;&#39;&#39;--&#39; . class fishLoop{ String [][] fish; public fishLoop(){ fish = new String[][]{ // 1 fish { &quot;~~~~~~~~~~~~~&quot;, //[0][0] &quot; _///_ &quot;, //[0][1] &quot; /o |/ &quot;, //[0][2] &quot; &gt; ))_.|- &quot;, //[0][3] &quot; &lt; &quot; //[0][4] }, // 2 fish { &quot;~~~~~~~~~~~~~&quot;, //[1][0] &quot; .-=-. , &quot;, //[1][1] &quot;(o &gt;&lt; &quot;, //[1][2] &quot; `-=-&#39; ` &quot;, //[1][3] &quot; /// &quot; //[1][4] }, // red fish { &quot;~~~~~~~~~~~~~&quot;, //[2][0] &quot; . )| &quot;, //[2][1] &quot; |`.-&#39; `-oo &quot;, //[2][2] &quot; ) _ __,0)&quot;, //[2][3] &quot; /.&#39; )/ &quot; //[2][4] }, //blue fish { &quot;~~~~~~~~~~~~~&quot;, //[3][0] &quot; )| &quot;, //[3][1] &quot; .- -. &quot;, //[3][2] &quot; )|| (( o ) &quot;, //[3][3] &quot; )/&#39;&#39;&#39;--&#39; &quot; , //[3][4] }, }; } public void printFish(){ System.out.println(); System.out.println(&quot;Blub blub blub&quot;); int count = fish.length; for (int i = count; i&gt;=1; i--){ int a = fish[0].length; for (int row = 0; row &lt; a; row++){ for (int col = 0; col &lt; count; col++){ System.out.print(fish[col][row] + &quot; &quot;); } System.out.println(&quot; &quot;); } count -= 1; } System.out.println(&quot;Fish swimming in the sea...&quot;); } public static void main(String[] args) { new fishLoop().printFish(); } } fishLoop.main(null); . Blub blub blub ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ _///_ .-=-. , . )| )| /o |/ (o &gt;&lt; |`.-&#39; `-oo .- -. &gt; ))_.|- `-=-&#39; ` ) _ __,0) )|| (( o ) &lt; /// /.&#39; )/ )/&#39;&#39;&#39;--&#39; ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ _///_ .-=-. , . )| /o |/ (o &gt;&lt; |`.-&#39; `-oo &gt; ))_.|- `-=-&#39; ` ) _ __,0) &lt; /// /.&#39; )/ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ _///_ .-=-. , /o |/ (o &gt;&lt; &gt; ))_.|- `-=-&#39; ` &lt; /// ~~~~~~~~~~~~~ _///_ /o |/ &gt; ))_.|- &lt; Fish swimming in the sea... .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/13/array.html",
            "relUrl": "/java/labs/2022/09/13/array.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Java Conditionals",
            "content": "If-Else Statements . If-Else statements are conditional statements that determine which section of code to run. . /* Example 1: If condition is not true, else is executed */ int x = 5; // variable x if (x&lt;4){ // the line of code within the if statement will not be executed as x is not less than 4 System.out.println(&quot;X is less than 4&quot;); } else { // the line of code within the else statement is executed because first condition is not true System.out.println(&quot;X is greater than 4&quot;); } . X is greater than 4 . /* Example 2: If condition is true, else is not executed */ int x = 3; // variable x if (x&lt;4){ // the line of code within the if statement will be executed as x is less than 4 System.out.println(&quot;X is less than 4&quot;); } else { // the line of code within the else statement is not executed because first condition is true System.out.println(&quot;X is greater than 4&quot;); } . X is less than 4 . If-Elseif-Else Statements . If-Elseif-Else statements are another conditional statement, this time with 3 different code segments to execute from. Both the if and elseif need a condition, while the else does not. . /* Example 3: If condition false, else if condition true. Else if code is executed */ int x = 2; // variable x if (x&lt;4 &amp;&amp; x&gt;3 ){ // the line of code within the if statement will not be executed, as x is not between 3 and 4 System.out.println(&quot;X is less than 4&quot;); } else if (x == 2){ // the line of code within the else if statement is executed as x is equal to 2 System.out.println(&quot;X is equal to 2&quot;); } else { // the line of code within the else statement is not executed because the previous condition is true System.out.println(&quot;X is greater than 4&quot;); } . X is equal to 2 . Switch-case . There are many ways to write code. In the case of conditionals, a switch case can be used to replace a if-elseif-else statement. In a switch statement, one of many code blocks will be executed. . // this is an if-else-else statement String cheese = &quot;Gouda&quot;; if (cheese == &quot;Cheddar&quot;){ // tests if cheese = cheddar System.out.println(&quot;Cheddar originated in Somerset&quot;); } else if (cheese == &quot;Gouda&quot;){ // tests if cheese = gouda System.out.println(&quot;Gouda originated in the Netherlands&quot;); } else if (cheese == &quot;Milk&quot;){ // tests if cheese = milk System.out.println(&quot;Milk is made from cows, goats, and other mammals&quot;); } else if (cheese == &quot;Cheese&quot;){ // tests if cheese = cheese System.out.println(&quot;Cheese is very yummy&quot;); } else{ // if cheese is none of these System.out.println(&quot;Sorry, I don&#39;t have any information about &quot; + cheese); } . Gouda originated in the Netherlands . //the statement above can also be written like: String cheese = &quot;Gouda&quot;; switch(cheese) { case &quot;Cheddar&quot;: // tests if cheese = cheddar System.out.println(&quot;Cheddar originated in Somerset&quot;); break; case &quot;Gouda&quot;: // tests if cheese = gouda System.out.println(&quot;Gouda originated in the Netherlands&quot;); break; case &quot;Milk&quot;: // tests if cheese = milk System.out.println(&quot;Milk is made from cows, goats, and other mammals&quot;); break; case &quot;Cheese&quot;: // tests if cheese = cheese System.out.println(&quot;Cheese is very yummy&quot;); default: // if cheese is none of these System.out.println(&quot;Sorry, I don&#39;t have any information about &quot; + cheese); } . Gouda originated in the Netherlands . De Morgan&#39;s Law . De Morgan&#39;s Law illustrates how compound boolean expressions are read. It helps you simplify code and your logic operators. . boolean a = true; boolean b = false; if (!(a &amp;&amp; b)){ System.out.println(&quot;!(true &amp;&amp; false) is true&quot;); } else { System.out.println(&quot;!(true &amp;&amp; false) is false&quot;); } . !(true &amp;&amp; false) is true .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/07/conditionals.html",
            "relUrl": "/java/labs/2022/09/07/conditionals.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;-&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Math&quot;); System.out.println(&quot;5 - Tree&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, my name is Calissa!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: Scanner input = new Scanner(System.in); System.out.println(&quot;Pick the first number to multiply&quot;); int choice1 = input.nextInt(); //gets input box System.out.println(&quot;Pick the second number to multiply&quot;); int choice2 = input.nextInt(); System.out.print(choice1 + &quot; * &quot; + choice2 + &quot; = &quot; + (choice1*choice2)); break; case 5: Scanner sc5 = new Scanner(System.in); System.out.println(&quot;Pick a height for your tree!&quot;); int tree = sc5.nextInt(); //gets input box for (int i = 0; i &lt; tree; i++) { //rows for (int j = 0; j &lt; tree - i; j++) //prints spaces System.out.print(&quot; &quot;); for (int k = 0; k &lt; (2 * i + 1); k++) //prints asterisks System.out.print(&quot;*&quot;); System.out.println(); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Math 5 - Tree 0 - Quit - 5: Pick a height for your tree! * *** ***** ******* 4: Pick the first number to multiply Pick the second number to multiply 0 * 0 = 0 0: Goodbye, World! .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/01/menu.html",
            "relUrl": "/java/labs/2022/09/01/menu.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Primitives Notebook",
            "content": "public class DefinePrimitives { public static void main(String[] args) { int anInt = 3; double aDouble = 2.7; boolean aBoolean = true; // not primitives String aString = &quot;Primitives&quot;; // wrapper class shortcut assignment String aStringFormal = new String(&quot;Primitives are cool!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) . anInt: 3 aDouble: 2.7 aBoolean: true aString: Primitives aStringFormal: Primitives are cool! . public class primitivesMath { public static void main(String[] args){ int added = 0 + 3; double subtracted = 3 - 0.3; int divided = 39 / 3; double multiplied = 0.5 * 2; System.out.println(&quot;I should get a &quot; + added + &quot; on this assignment&quot;); System.out.println(&quot;You get a &quot; + subtracted + &quot; if you do the bullet points&quot;); System.out.println(divided + &quot; is my favorite number&quot;); System.out.println(&quot;I have &quot; + multiplied + &quot; dog&quot;); } } primitivesMath.main(null) . I should get a 3 on this assignment You get a 2.7 if you do the bullet points 13 is my favorite number I have 1.0 dog .",
            "url": "https://calissat.github.io/ws/java/2022/08/28/primitives.html",
            "relUrl": "/java/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fixing Java Kernel",
            "content": "The Problem . I tried to run a simple java code segment in my note book but it gave me this error . Failed to start the Kernel. Kernel Java is not usable . The Solution . Disclaimer: There is definitely a more convenient way to do this, and since I am not an expert I realize that I have like zero idea what I’m talking about . Step 1: Uninstall basically everything on your computer . pip3 uninstall jupyter pip3 uninstall jupyter_core pip3 uninstall jupyter-client pip3 uninstall jupyter-console pip3 uninstall notebook pip3 uninstall qtconsole pip3 uninstall nbconvert pip3 uninstall nbformat pip uninstall ipykernel pip uninstall jupyterlab-server pip uninstall jupyterlab . I got these commands from a very nice lady on GitHub Link . Step 2: Start reinstalling things . I have no idea what those lines deleted but just I just followed Mr. M’s commands to reinstall things that I probably already had installed but I just wanted to make sure . $ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install $ java --version # version of runtime $ javac --version # version of compiler (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels (base) id:~$ # start in home directory (base) id:~$ pip install bash_kernel # download bash kernel . This is when I realized that there might be something wrong with my bash because it gave me a weird response, and this is where I discovered that it was in fact broken . Step 3: Fix Bash . pip uninstall bash_kernel pip install bash_kernel . It then give me a list of conflicts because the things we needed installed were uninstalled . Type this commands into terminal: . conda install -c conda-forge rtree . For more information click: Link . Then, uninstall and reinstall bash again . pip uninstall bash_kernel pip install bash_kernel . And it fixed it somehow . Important note! . Don’t forget to reinstall things such as nbformat, or anything not covered by the conda-forge rtree line! It will cause issues later with Jupyter notebooks .",
            "url": "https://calissat.github.io/ws/markdown/2022/08/26/fixingjava.html",
            "relUrl": "/markdown/2022/08/26/fixingjava.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Bash Notebook",
            "content": "echo &quot;Welcome to my bash page&quot; . Welcome to my bash page . cd ls . Applications Library install.py Creative Cloud Files Movies java Desktop Music opt Documents Pictures spring_portfolio Downloads Public vscode Experimenting ijava-1.3.0.zip ws IdeaProjects ijava-1.3.0.zip.1 . pwd . /Users/calissa . python --version java --version javac --version . Python 3.9.12 openjdk 11.0.16.1 2022-08-12 OpenJDK Runtime Environment Homebrew (build 11.0.16.1+0) OpenJDK 64-Bit Server VM Homebrew (build 11.0.16.1+0, mixed mode) javac 11.0.16.1 . jupyter kernelspec list . Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/calissa/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python3912jvsc74a57bd09961afd50ddbee2a31a7c4a950441f89c9f7e572a5e9be13392b2ff72436ece0 /Users/calissa/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd09961afd50ddbee2a31a7c4a950441f89c9f7e572a5e9be13392b2ff72436ece0 bash /Users/calissa/Library/Jupyter/kernels/bash java /Users/calissa/Library/Jupyter/kernels/java javascript /Users/calissa/Library/Jupyter/kernels/javascript python3 /Users/calissa/opt/anaconda3/share/jupyter/kernels/python3 . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/spring_portfolio # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /Users/calissa/vscode exists. Directory /Users/calissa/vscode/spring_portfolio exists. .",
            "url": "https://calissat.github.io/ws/bash/2022/08/25/bash.html",
            "relUrl": "/bash/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Welcome",
            "content": "Welcome . This is the official Welcome Page of Calissa’s Fastpages. . . Get to know me… . Things I like: . Whales | Sloths | Food | . . My favorite food: . Tacos | Pasta | Omelettes | A nice quote: . People say nothing is impossible, but I do nothing everyday. . . A nice alert box . Information",
            "url": "https://calissat.github.io/ws/markdown/2022/08/21/welcome.html",
            "relUrl": "/markdown/2022/08/21/welcome.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello welcome to my Python Notebook&quot;) . Hello welcome to my Python Notebook .",
            "url": "https://calissat.github.io/ws/python/2022/08/21/python.html",
            "relUrl": "/python/2022/08/21/python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Java Notebook",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hello! Welcome to my Java Notebook&quot;); } } HelloStatic.main(null); . Hello! Welcome to my Java Notebook .",
            "url": "https://calissat.github.io/ws/java/2022/08/21/java.html",
            "relUrl": "/java/2022/08/21/java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is for Calissa T 1. . Made for APCSA &#8617; . |",
          "url": "https://calissat.github.io/ws/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Calissa's Blog",
          "content": "APCSP . I joined APCSP relatively new to coding, and pretty garbage at it. I remember making my “About Me Page” at the beginning of tri one, which was coded in HTML and consisted of an image and a couple &lt;p&gt; tags. I felt like I was about to be the next Bill Gates with these skills, but I was proven very wrong during the rest of the course. . Most of the time when Mr. M held TechTalks or our technical officers had a presentation on key topics, I used every ounce of my brain power to try and figure out what they were even talking about. Obviously, it didn’t work, and I spent most of the class very lost, stressed, and a little sad. . However, through this struggle I learned the magic of StackOverflow and my very smart teammates Akhil and Avinh. Whenever I had a I problem, I asked them and they would always help me. The very few instances in which they didn’t know why my code was broken, I went to Mr. M. . Now, this doesn’t sound like a very productive way to go through a computer science class, but as the class progressed, I slowly began learning more and more. Although I am no Anthony (an absolute legend), there were days when I made something good enough to make me feel like I was. . As the AP test approached, I genuinely thought I was going to fail because I was pretty incompetent and didn’t understand major concepts on College Board. So, I went on the grind, and started watching more CB videos and doing thorough test corrections on the practice AP tests we did in class. I got a 5 on the exam which was kind of a shocker . APCSA . Week 0: . I struggled to download literally everything because my computer is like jacked and just hates me. . Week 1: . After thinking I successfully downloaded everything, I realized my Java Kernel was broken and I had to go through this very long and painful process to fix it. In that process, I broke a lot of other things, which Mr. M so kindly fixed for me . Week 2: . I honestly don’t really understand what is going on right now. Java is significantly more confusing than Python and it lowkey hurts my brain. Doing the code.org lessons kind of helped, but I’m definitely struggling a lot. . Week 3: . I really enjoyed doing the boolean lab, it helped me solidify my knowledge of if-else and if-elseif-else statements. I learned about switch statements and De Morgan’s law. De Morgan’s law is a little confusing but I will pick it up eventually. My deployment mostly went smoothly besides the last step. I was able to get a domain and everything . Psychology and the Good Life: . We can control a lot more of our happiness than we think | Becoming happier takes a lot of effort | Money has a big influence on happiness Can create stress or pressure | . | . Like many others, I believe that success and prestige makes me happy. That’s why I stress so much about getting good grades, trying to get the best scores, and taking hard classes. I convince myself that the suffering and stress now will lead to happiness and wealth later. After watching this video, I’ve realized that although I want to be succesful, that is not the only thing that makes me happy. My friends, family, dog, videogames, and food are all things that make me happy. I also know that I have control over my mindset and actions, both of which influence a happy lifestyle. Living under the pressure of having to become what society deems “succesful” is hard, but the hardest kind of success is being happy with life and yourself. . Week 4: . I’m lowkey struggling with the array assignment thing because arrays confuse me. I don’t really understand how the whole printing thing works and all the different rows and columns. I enjoyed putting in my ASCII fish though. :) .",
          "url": "https://calissat.github.io/ws/blog/",
          "relUrl": "/blog/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Java Labs",
          "content": "Menu | Conditionals | Primitives | Arrays | Fibonacci | .",
          "url": "https://calissat.github.io/ws/javaLabs/",
          "relUrl": "/javaLabs/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Notes",
          "content": "Capture Information Plan: . This is where I will store most of my general notes. If there is specific information either college board or PBL, I will label it by unit or lab. . Some Key Terms in Java: . The main method is where the program starts running. | Objects are an instance of a class. Objects can have attributes. For instance, a Student object might have name and grade as attributes. | A class is a programmer defined blueprint from which objects are created. Ex: Class is ClubMember Attributes: Name, grade | . | . | A parameter is a variable in the method/constructor signature that defines the type of value to receive when the method or constructor is called. | An argument is a value passed to a method or constructor when the method or constructor is called. | Super class is a class that can be extended to create subclasses | Subclass is a class that extends a superclass and inherits its attributes and behaviors | Inheritence is an OOP principle where a subclass inherits the attributes nad behaviors of a superclass | Concatenation is joining two strings together | . 8/30 Using Objects . Public means availible everywhere | Final means that its not going anywhere | myPainter.move(); (.) notation means that you’re using objects | Refrencing data property or refrencing method | myPainter is object | .move(); is a method | . | . Unit 6 Inheritence . Instantiate an object . ClassName objectName = new ClassName(); // example PainterPlus myPainterPlus = new PainterPlus(); . Creating a subclass . public class Subclass extends SuperClass { public Subclass() { super(); } } . Unit 7 Writing a Method . . public class PainterPlus extends Painter{ public PainterPlus(){ super(); } public void turnRight(){ turnLeft(); turnLeft(); turnLeft(); } } . //Unit 9 While Loops Control Structure: A conditional or iteration statement which affects the flow of a program . . //Unit 10 Two Way Selection Logical Operators . Put in front of condition | . NOT (!) - Returns opposite of operand . public void moveOrTakePaint(){ while (canMove()) if (!isOnBucket()){ move(); } else takePaint(); } .",
          "url": "https://calissat.github.io/ws/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://calissat.github.io/ws/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}