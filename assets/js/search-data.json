{
  
    
        "post0": {
            "title": "Homework",
            "content": "Merge Sort Hacks . //Sorts strings in alphabetical order class MergeSort { void merge(String arr[], int l, int m, int r) { // Find the sizes of two subarrays to be merged int n1 = m - l + 1; int n2 = r - m; /* Create temp arrays */ String[] L = new String[n1]; String[] R = new String[n2]; /* Copy data to temp arrays */ for (int i = 0; i &lt; n1; ++i) L[i] = arr[l + i]; for (int j = 0; j &lt; n2; ++j) R[j] = arr[m + 1 + j]; /* Merge the temp arrays */ // Initial indexes of first and second subarrays int i = 0, j = 0; // Initial index of merged subarray array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (L[i].compareTo(R[j]) &gt; 0) { arr[k] = R[j]; j++; } else { arr[k] = L[i]; i++; } k++; } /* Copy remaining elements of L[] if any */ while (i &lt; n1) { arr[k] = L[i]; i++; k++; } /* Copy remaining elements of R[] if any */ while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } void sort(String arr[], int l, int r) { if (l &lt; r) { // Find the middle point int m = l + (r - l) / 2; // Sort first and second halves sort(arr, l, m); sort(arr, m + 1, r); // Merge the sorted halves merge(arr, l, m, r); } } static void print(String arr[]) { for (String word : arr){ System.out.print(word + &quot; &quot;); } } //tester method public static void main(String args[]) { String[] arr = new String[]{&quot;Cow&quot;, &quot;Dog&quot;, &quot;Bird&quot;, &quot;Sheep&quot;, &quot;Goat&quot;, &quot;Pig&quot;, &quot;Quail&quot;, &quot;Crow&quot; }; System.out.println(&quot;Given Array:&quot;); print(arr); MergeSort ob = new MergeSort(); ob.sort(arr, 0, arr.length - 1); System.out.println(&quot; nSorted Array:&quot;); print(arr); } } MergeSort.main(null); . Given Array: Cow Dog Bird Sheep Goat Pig Quail Crow Sorted Array: Bird Cow Crow Dog Goat Pig Quail Sheep .",
            "url": "https://calissat.github.io/ws/2023/04/25/homework.html",
            "relUrl": "/2023/04/25/homework.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "AP CSA Studying",
            "content": "Methods and Control Structures . 2022 Live Review 1 . //STRUCTURE OF A CLASS //circle class public class Circle{ //Private instance variable w/ scope of entire class private double radius; //Constructor w/ double parameter public Circle (double r){ /* implementation not shown */ } /* Method signature * - visibility modifier (usually public) * - return type * - name * - parameter list (whats in the parenthesis) */ //void does not return a value, just carries out task public void adjustSize(double factor){ radius = radius * factor; } //return method has to include return (double) public double getDiameter(){ return 2*radius; } //has to include return (double) public double get Circumference(){ return 2 * radius * Math.PI; } } . //2021 FRQ1 WordMatch public class WordMatch{ //The secret string private String secret; //Constructs a WordMatch object with the given secret string of lowercase letters public WordMatch(String word){ /* implementation not shown */ } /* Returns a score for guess, as describe in part a * Precondition: 0 &lt; guess.length &lt;= secret.length */ public int scoreGuess(String guess){ int count = 0; //stops so that it doesn&#39;t go out of bounds for (int i = 0; i &lt; (secret.length() - guess,length()); i++){ //can also use .equals //compares guess to substring of secret if (guess == secret.substring(i,i+guess.length)){ count++; } } //returns count*guess.length^2 for score return count * (guess.length*guess.length); } /* Returns the better of the two guesses, as determined by scoreGuess and the rules for a * tie breaker that are described in part b * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2 */ public String findBetterGuess(String guess1, String guess2){ if(scoreGuess(guess1) &gt; scoreGuess(guess2)){ return guess1; } else if (scoreGuess(guess1) &lt; scoreGuess(guess2)){ return guess2; } //.compareTo is string method that tells relationship between two string with in value //if this returns value greater than one, this mean guess1 comes after guess2 else if (guess1.compareTo(guess2) &gt; 0){ return guess1; } else { return guess2; } } } .",
            "url": "https://calissat.github.io/ws/2023/04/24/study.html",
            "relUrl": "/2023/04/24/study.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "import java.util.UUID; public class Book { private String bookTitle; private static int bookCount = 0; private final UUID id; //1. Define 1 argument constructure for title public static Book(String bookTitle){ this.bookTitle = bookTitle; bookCount++; } //2. Define toString method for title, and a tester method public static toString(){ return &quot;Title:&quot; + this.title; } //3. Generate unique id for class public static int giveID(){ } //4. Create a public getter that has Book Count public static int getCount(){ return bookCount; } //5. Define tester method that intitialized at least 2 books, outputs title, and provides a count of books in library public static tester(){ Book book1 = new Book(&quot;Lord of the Rings&quot;); Book book2 = new Book(&quot;Math textbook&quot;); System.out.println(); } } //Sorry Mr. M I failed you . | public static toString(){ invalid method declaration; return type required | public static tester(){ invalid method declaration; return type required .",
            "url": "https://calissat.github.io/ws/2023/04/20/test.html",
            "relUrl": "/2023/04/20/test.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Arrays and 2D Arrays",
            "content": "Arrays . Arrays are 10-15% of the exam, so it is very important to understand the basics of arrays. Collegeboard will typically test you on: . Representing multiple items as array objects | Traversing an array by accessing the elements using iteration statements | Standard algorithms that utilize array traversals to perform functions | . Array Basics . An array can contain primitives (int, char, etc) and object references of a class. Primitive data types have their actual values stored in contiguous memory location. . Important things to note are that: . Arrays are fixed in size | Arrays can be used as a static field, local variable, or method parameter | . . //BASIC ARRAY CONCEPTS //Declare an array and then allocate memory int myArray[]; myArray = new int[4]; //Declare while directly assign values int[] myArray1 = new int[]{ 1, 6, 7, 9}; //Initialize element myArray[0] = 2; //Create an array of objects Object[] arr = new Object[5]; . Traversing an Array . Common ways to traverse an array include for loops and while loops. . //Basic for loop to print elements of array int[] arr1 = {0, 6, 8, 2}; // Looping through array by incrementing value of i //&#39;i&#39; is an index of array &#39;arr1&#39; for (int i = 0; i &lt; arr1.length; i++) { // Print array element present at index i System.out.print(arr1[i] + &quot; &quot;); } /* NOTE: You may also use an enhanced for loop for(int index: arr){ System.out.println(index) } */ . 0 6 8 2 . //HACK!!! //Create a method that sets each element of an array to 0 . Developing Algorithms Using Arrays . Arrays are an essential part in developing algorithms. It is important to understand how to traverse an array and the structure of an array to accomplish this. . There are lots of algorithms you can create,and CollegeBoard goes over a lot of good examples of this. They go over this in the 6.4 unit videos. . //Example finding the max in an array. //Finds the maximum in an array public static int maximum(int[] array) { //variable that holds value of max value int maxValue = array[0]; //for each number in the array.. for (int number: array) { //checks if current index is greater than maxValue if (number &gt; maxValue) { //if new max value found, replace current maxValue maxValue = number; } } return maxValue; } //tester array int[] test = {3, 5, 7, 2, 10}; //returns 10 maximum(test); //HACK!!! //What would we have to change in this algorithm if we wanted to find the min . 10 . 2-D Arrays . 2-D arrays are 7.5-10% of the exam, so they are also very important to know for the AP exam. Many concepts of 2-D arrays rely on a solid understanding of arrays. . A 2-D array is an array of arrays, and store data similar to a row and column fashion. . Length is determined by the number of rows in the array, which is also the number of arrays in the 2-D array. . Columns is based on the size of each row of an array and can be determined based on the number of elements in the first row. . 2-D Array Basics . //create a new 2-d array int[][] twoDArray = new int[3][3]; //access the value at row 2 column 1 twoDArray[1][0]; //get value at the end of a 2-d array // (twoDArray.length - 1) gets how many arrays (rows) // (twoDArray[0].length - 1) gets how many elements in first array (columns) twoDArray[twoDArray.length - 1][twoDArray[0].length - 1]; . 0 . Traversing 2-D Arrays . 2-D arrays are traversed similarly to arrays in that you will primarily use for and while loops. However, since there are both rows and columns now, you will need to use nested for loops or nested enhanced for loops. . //Prints the 2-d array public static void print2D(int mat[][]) { // For each row of the array (goes one array at a time) for (int row = 0; row &lt; twoDArray1.length; row++) //Goes through each element of the array for (int column = 0; column &lt; twoDArray1[row].length; column++) System.out.print(mat[row][column] + &quot; &quot;); } int twoDArray1[][] = { { 1, 2, 3 }, { 4, 6, 7 }, { 8, 9, 10} }; print2D(twoDArray1); . 1 2 3 4 6 7 8 9 10 . When traversing 2-D arrays it is important to note wether the code is in row-major or column-major order. This basically indicates what the outer for loop of the method is traversing. . If the outer loop is going by column, its in column major order. If the outer loop is going by row, its in row-major order. . The code example above is in row-major order . //HACK!!!! //What does the following code segment execute? public static void main(String[] args){ int[][] arrayOne = new int[5][7]; for (int row = 0; row &lt; arrayOne.length; row++){ for (int col = 0; col &lt; arrayOne[row].length; col++){ arrayOne[row][col] = row+col - 1; } } System.out.println(arrayOne[4][6]); } .",
            "url": "https://calissat.github.io/ws/2023/04/18/arraysandmore.html",
            "relUrl": "/2023/04/18/arraysandmore.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Hashmaps",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * Animal class extends Collectable and defines abstract methods */ public class Animal extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* Getters * */ public String getName() { return this.name; } public int getAge() { return this.age; } public String getColor() { return this.color; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // convert to Coolection and sort in name order Animal.setOrder(KeyType.name); List&lt;Animal&gt; animals = new ArrayList&lt;Animal&gt;(Arrays.asList(objs)); // Array has asList conversion Collections.sort(animals); Animal.setOrder(KeyType.title); for (Animal animal : animals) System.out.println(animal); } } Animal.main(null); . class [LREPL.$JShell$12$Animal; 6 Collectable: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 Animal: Cat, Black, 10 Animal: Dog, Brown, 14 Animal: Kitty, Calico, 1 Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 . import java.util.HashMap; public class Pets { // create a new HashMap HashMap&lt;String, Animal&gt; names = new HashMap&lt;&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap names.put(&quot;Leo&quot;, new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;)); names.put(&quot;Porky&quot;, new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;)); names.put(&quot;Ro-Ro&quot;, new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;)); names.put(&quot;Midnight&quot;, new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;)); names.put(&quot;Hobbes&quot;, new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;)); names.put(&quot;Duke&quot;, new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;)); } /* Remove Pet * */ public Animal remove(String key) { // check if a key exists in the HashMap then remove Animal animal = null; if (names.containsKey(key)) { animal = names.get(key); names.remove(key); } return animal; } /* Print Pets * */ public void print() { // iterate over the keys in the HashMap for (String name: names.keySet()) { Animal obj = names.get(name); System.out.println(name + &quot; is a &quot; + obj.getColor() + &quot; &quot; + obj.getName() + &quot; and is &quot; + obj.getAge() + &quot; years old.&quot;); } System.out.println(); } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); pets.print(); // remove Pet /* Animal animal = pets.remove(&quot;Hobbes&quot;); if (animal == null) { System.out.println(key + &quot; not found&quot;); } else { System.out.println(&quot;Removed: &quot; + key + &quot;, &quot; + animal); } pets.print(); */ } } Pets.main(null); . Hobbes is a Calico Kitty and is 1 years old. Leo is a Gold Lion and is 8 years old. Porky is a Pink Pig and is 3 years old. Ro-Ro is a Red Robin and is 7 years old. Duke is a Brown Dog and is 14 years old. Midnight is a Black Cat and is 10 years old. . import java.util.HashMap; public class Pets { // create a new HashMap HashMap&lt;String, Animal&gt; names = new HashMap&lt;&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap names.put(&quot;Leo&quot;, new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;)); names.put(&quot;Porky&quot;, new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;)); names.put(&quot;Ro-Ro&quot;, new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;)); names.put(&quot;Midnight&quot;, new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;)); names.put(&quot;Hobbes&quot;, new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;)); names.put(&quot;Duke&quot;, new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;)); } /* Remove Pet * */ public Animal remove(String key) { // check if a key exists in the HashMap then remove Animal animal = null; if (names.containsKey(key)) { animal = names.get(key); names.remove(key); } return animal; } /* Print Pets * */ public void print() { // iterate over the keys in the HashMap for (String name: names.keySet()) { Animal obj = names.get(name); System.out.println(name + &quot; is a &quot; + obj.getColor() + &quot; &quot; + obj.getName() + &quot; and is &quot; + obj.getAge() + &quot; years old.&quot;); } System.out.println(); } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); pets.print(); // remove Pet /* Animal animal = pets.remove(&quot;Hobbes&quot;); if (animal == null) { System.out.println(key + &quot; not found&quot;); } else { System.out.println(&quot;Removed: &quot; + key + &quot;, &quot; + animal); } pets.print(); */ } } Pets.main(null); . Hobbes is a Calico Kitty and is 1 years old. Leo is a Gold Lion and is 8 years old. Porky is a Pink Pig and is 3 years old. Ro-Ro is a Red Robin and is 7 years old. Duke is a Brown Dog and is 14 years old. Midnight is a Black Cat and is 10 years old. . import java.util.HashSet; import java.util.Set; public class AnimalSet { public static void main(String[] args) { // create a new HashSet Set&lt;String&gt; animals = new HashSet&lt;&gt;(); // add some elements to the Set animals.add(&quot;lion&quot;); animals.add(&quot;dog&quot;); animals.add(&quot;cat&quot;); // print out the Set System.out.println(animals); // check if an element is in the Set boolean hasLion = animals.contains(&quot;lion&quot;); System.out.println(&quot;Has lion: &quot; + hasLion); // remove an element from the Set animals.remove(&quot;lion&quot;); System.out.println(&quot;Removed lion&quot;); // print out the Set System.out.println(animals); // add duplicate System.out.println(&quot;add duplicate dog&quot;); animals.add(&quot;dog&quot;); // no action System.out.println(animals); // add duplicate System.out.println(&quot;add pig&quot;); animals.add(&quot;pig&quot;); System.out.println(animals); // using forEach() method with a lambda expression animals.forEach(animal -&gt; { String message = &quot;I &quot;; message += animal.equals(&quot;dog&quot;) ? &quot;like&quot; : &quot;don&#39;t like&quot;; message += &quot; &quot; + animal + &quot;s &quot; + &quot;for pets&quot;; System.out.println(message); }); } } AnimalSet.main(null); . [cat, dog, lion] Has lion: true Removed lion [cat, dog] add duplicate dog [cat, dog] add pig [cat, dog, pig] I don&#39;t like cats for pets I like dogs for pets I don&#39;t like pigs for pets .",
            "url": "https://calissat.github.io/ws/2023/04/04/hashmaps.html",
            "relUrl": "/2023/04/04/hashmaps.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Experimenting and Practice",
            "content": "Merge with Fixed Variables . // two nums array and a merged array int[] nums1 = new int[]{ 1, 4, 5, 8 }; int[] nums2 = new int[]{ 2, 3, 6, 7 }; int[] merged = new int[8]; //setting counts so we can iterate through the elements separately int countOne = 0; int countTwo = 0; int m = 0; //iterates 7 times, as 8th iteration creates an outofbounds error because nums2[5] doesn&#39;t exist for (int i = 0; i &lt; 7; i++){ //if element in nums1 is bigger than the element in nums2 if (nums1[countOne] &lt; nums2[countTwo]){ //sets the index of merged equal to nums1 element merged[m] = nums1[countOne]; countOne++; m++; } else { //sets the index of merged equal to nums2 element merged[m] = nums2[countTwo]; countTwo++; m++; } } //sets the last index of merged to last index of nums1 merged[7]= nums1[3]; //prints merge for(int nums: merged){ System.out.print(nums); } . 12345678 . Merge with Flexible Variables . // two nums array and a merged array int[] nums1 = new int[]{ 1, 4, 5, 8 }; int[] nums2 = new int[]{ 2, 3, 6, 7 }; // finds length of both arrays int totalLength = nums1.length + nums2.length; int[] merged = new int[totalLength]; //iterate through merged and other arrays separately int m = 0; int countOne = 0; int countTwo = 0; for (int i = 0; i &lt; totalLength; i++){ //if nums1 is empty if(countOne == nums1.length){ //dumps rest of array into merged for (int a = countTwo; a &lt; nums2.length; a++){ merged[m] = nums2[a]; } } //if nums2 is empty else if (countTwo == nums2.length){ //dumps rest of array into merged for (int a = countOne; a &lt; nums1.length; a++){ merged[m] = nums1[a]; } } else if (nums1[countOne] &lt; nums2[countTwo]){ //sets the index of merged equal to nums1 element merged[m] = nums1[countOne]; countOne++; m++; } else { //sets the index of merged equal to nums2 element merged[m] = nums2[countTwo]; countTwo++; m++; } } for (int nums: merged){ System.out.print(nums); } . 12345678 . Insertion Sort . import java.util.Random; //instance of Random class Random rand = new Random(); //creates an array with 5000 terms int[] nums = new int[100]; //sets each element to a random number for (int i = 0; i &lt; nums.length; i++){ nums[i] = rand.nextInt(9); } //Print before sort System.out.println(&quot;Before sort:&quot;); for (int x: nums){ System.out.print(x); } //for each value through array for (int i = 1; i &lt; nums.length; i++){ //value at index i int value = nums[i]; //value before index i int a = i - 1; //iterates while a&gt;0 and the value before index i is greater than at index i while (a &gt;= 0 &amp;&amp; nums[a] &gt; value){ //moves larger value one index back (swaps position) nums[a + 1] = nums[a]; a = a - 1; } //sets index to value nums[a + 1] = value; } //Print after sort System.out.println(&quot; &quot;); System.out.println(&quot;After sort:&quot;); for (int x: nums){ System.out.print(x); } . Before sort: 3277214064538056060037426714362230344768520478064716744841806721228886457282148033787457803446838032 After sort: 0000000000001111112222222222223333333333344444444444444445555566666666666777777777777788888888888888 . import java.util.Random; //instance of Random class Random rand = new Random(); //creates an array with 5000 terms int[] nums = new int[5000]; //sets each element to a random number for (int i = 0; i &lt; nums.length; i++){ nums[i] = rand.nextInt(9); } int comparisonCount = 0; int swapCount = 0; //gets time before program runs long startTime = System.nanoTime(); //for each value through array for (int i = 1; i &lt; nums.length; i++){ //value at index i int value = nums[i]; //value before index i int a = i - 1; //iterates while a&gt;0 and the value before index i is greater than at index i while (a &gt;= 0 &amp;&amp; nums[a] &gt; value){ comparisonCount++; //moves larger value one index back nums[a + 1] = nums[a]; a = a - 1; } //sets index to value nums[a + 1] = value; swapCount++; } //gets time after long endTime = System.nanoTime(); //total runtime long totalTime = endTime - startTime; System.out.println(&quot;Comparison Count: &quot; + comparisonCount); System.out.println(&quot;Swap Count: &quot; + swapCount); System.out.println(totalTime + &quot; nanoseconds&quot;); . Comparison Count: 5386389 Swap Count: 4999 24039834 nanoseconds . Merge Sort . import java.util.Random; public class MergeSort { public static void merge(int[] arr, int left, int middle, int right) { int n1 = middle - left + 1; int n2 = right - middle; // Create temporary arrays to store left and right sub-arrays int[] leftArr = new int[n1]; int[] rightArr = new int[n2]; // Copy data from original array to left and right sub-arrays System.arraycopy(arr, left, leftArr, 0, n1); System.arraycopy(arr, middle + 1, rightArr, 0, n2); // Merge the left and right sub-arrays int i = 0; int j = 0; int k = left; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (leftArr[i] &lt;= rightArr[j]) { arr[k++] = leftArr[i++]; } else { arr[k++] = rightArr[j++]; } } // Copy remaining elements from left and right sub-arrays, if any while (i &lt; n1) { arr[k++] = leftArr[i++]; } while (j &lt; n2) { arr[k++] = rightArr[j++]; } } public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { // Find middle element int middle = left + (right - left) / 2; // Recursively sort left and right sub-arrays mergeSort(arr, left, middle); mergeSort(arr, middle + 1, right); // Merge the sorted left and right sub-arrays merge(arr, left, middle, right); } } public static void main(String[] args) { int[] arr = { 64, 34, 25, 12, 22, 11, 90 }; int n = arr.length; System.out.println(&quot;Original array:&quot;); for (int num : arr) { System.out.print(num + &quot; &quot;); } long startTime = System.nanoTime(); mergeSort(arr, 0, n - 1); long endTime = System.nanoTime(); long totalTime = endTime - startTime; System.out.println(&quot; &quot;); System.out.println(&quot; nSorted array:&quot;); for (int num : arr) { System.out.print(num + &quot; &quot;); } System.out.println(&quot; &quot;); System.out.println(totalTime + &quot; nanoseconds&quot;); } } MergeSort.main(null); . Original array: 64 34 25 12 22 11 90 Sorted array: 11 12 22 25 34 64 90 7958 nanoseconds . import java.util.Random; public class MergeSort { public static void merge(int[] arr, int left, int middle, int right) { int n1 = middle - left + 1; int n2 = right - middle; // Create temporary arrays to store left and right sub-arrays int[] leftArr = new int[n1]; int[] rightArr = new int[n2]; // Copy data from original array to left and right sub-arrays System.arraycopy(arr, left, leftArr, 0, n1); System.arraycopy(arr, middle + 1, rightArr, 0, n2); // Merge the left and right sub-arrays int i = 0; int j = 0; int k = left; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (leftArr[i] &lt;= rightArr[j]) { arr[k++] = leftArr[i++]; } else { arr[k++] = rightArr[j++]; } } // Copy remaining elements from left and right sub-arrays, if any while (i &lt; n1) { arr[k++] = leftArr[i++]; } while (j &lt; n2) { arr[k++] = rightArr[j++]; } } public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { // Find middle element int middle = left + (right - left) / 2; // Recursively sort left and right sub-arrays mergeSort(arr, left, middle); mergeSort(arr, middle + 1, right); // Merge the sorted left and right sub-arrays merge(arr, left, middle, right); } } public static void main(String[] args) { //creates an array with 5000 terms int[] nums = new int[5000]; int n = nums.length; //sets each element to a random number for (int i = 0; i &lt; nums.length; i++){ nums[i] = rand.nextInt(9); } long startTime = System.nanoTime(); mergeSort(nums, 0, n - 1); long endTime = System.nanoTime(); long totalTime = endTime - startTime; System.out.println(&quot; &quot;); System.out.println(totalTime + &quot; nanoseconds&quot;); } } MergeSort.main(null); . 375958 nanoseconds . Big O Ideas . Merge Sort: O(n*logn) | Insertion Sort: O(n^2) | . Insertion sort takes roughly: . 40300875 nanoseconds for a 5000 element array | 7440250 nanoseconds for a 100 element array | . Merge sort takes roughly: . 4337333 nanoseconds for a 5000 element array | 72083 nanoseconds for a 100 element array | . Merge sort is better for larger arrays, while insertion sort is better for smaller arrays. .",
            "url": "https://calissat.github.io/ws/2023/03/24/experimenting.html",
            "relUrl": "/2023/03/24/experimenting.html",
            "date": " • Mar 24, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Generic Types and Collections Week 26",
            "content": "Classes and Object . Parts of a class: . Constructor header with parameters | Instance variables (private, public) | Accessor methods (return value: int, string, etc) | Mutator methods (changes values) | . Instantiate an Object: . Class object = new Class(parameters) | . Using Methods: . object.method() | Math class --&gt; Math.method() | Make sure you&#39;re solid on this for the test | . Interface vs. Implementation . Interface: where you define the methods you have in the class | Implementation: instantiate objects and methods | . Complexity . The time and space an algorithm takes (space complexity) | Ex: multiple loops | . Linked Lists . Another data structure | LinkedList linky = new LinkedList();&lt;/li&gt; Similarly to an arrayList there are a lot of methods that come with it | Very flexible | Each value in the list knows the element before and after | Iterator object --&gt; must import java.util | Maintains insertion order | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Queues . Queue bbqLine = new LinkedLists();&lt;/li&gt; There are a bunch of methods that come with it | Can take out someone using .poll(); method | Can see the first element using .peek(); | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Stacks . Last in first out | Contains basic push and pop operations | public class Stack extends Vector&lt;/li&gt; Subclass of Vector | Must import java.util.stack | &lt;/ul&gt; Helpful Link . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses linked list implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); //Collection has a toArray conversion Object[] arr = queue.toArray(); //Empty queue System.out.println(&quot;Empty Queue&quot;); while (queue.size() &gt; 0) System.out.println(queue.remove()); //Iterate of array System.out.println(&quot;Iterate over Array&quot;); for (Object a : arr) //type becomes Object because of conversion // objects have a toString method built into it, so it prints as a String System.out.println(a); . Empty Queue John Jane Bob Iterate over Array John Jane Bob . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$23$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$23$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . /* * Animal class extends Generics and defines abstract methods */ public class Animal extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // print name only Animal.setOrder(KeyType.name); Animal.print(objs); } } Animal.main(null); . class [LREPL.$JShell$25$Animal; 6 Generic: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 class [LREPL.$JShell$25$Animal; 6 Generic: Animal listed by name Lion Pig Robin Cat Kitty Dog . public class Cupcake extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Cupcake.key = key;} public enum KeyType implements KeyTypes {title, flavor, frosting, sprinkles} // Instance data private final String frosting; private final int sprinkles; private final String flavor; // Constructor Cupcake(String frosting, int sprinkles, String flavor) { this.setType(&quot;Cupcake&quot;); this.frosting = frosting; this.sprinkles = sprinkles; this.flavor = flavor; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Cupcake.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.flavor.equals(this.getKey())) { output += this.flavor; } else if (KeyType.frosting.equals(this.getKey())) { output += this.frosting; } else if (KeyType.sprinkles.equals(this.getKey())) { output += &quot;00&quot; + this.sprinkles; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.flavor + &quot;, &quot; + this.frosting + &quot;, &quot; + this.sprinkles; } return output; } // Test data initializer public static Cupcake[] cupcakes() { return new Cupcake[]{ new Cupcake(&quot;Red&quot;, 4, &quot;Red Velvet&quot;), new Cupcake(&quot;Orange&quot;, 5, &quot;Orange&quot;), new Cupcake(&quot;Yellow&quot;, 6, &quot;Lemon&quot;), new Cupcake(&quot;Green&quot;, 7, &quot;Apple&quot;), new Cupcake(&quot;Blue&quot;, 8, &quot;Blueberry&quot;), new Cupcake(&quot;Purple&quot;, 9, &quot;Blackberry&quot;), new Cupcake(&quot;Pink&quot;, 10, &quot;Strawberry&quot;), new Cupcake(&quot;Tan&quot;, 11, &quot;Vanilla&quot;), new Cupcake(&quot;Brown&quot;, 12, &quot;Chocolate&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Cupcake[] objs = cupcakes(); // print with title Cupcake.setOrder(KeyType.title); Cupcake.print(objs); // print flavor only Cupcake.setOrder(KeyType.flavor); Cupcake.print(objs); } } Cupcake.main(null); . class [LREPL.$JShell$27$Cupcake; 9 Generic: Cupcake listed by title Cupcake: Red Velvet, Red, 4 Cupcake: Orange, Orange, 5 Cupcake: Lemon, Yellow, 6 Cupcake: Apple, Green, 7 Cupcake: Blueberry, Blue, 8 Cupcake: Blackberry, Purple, 9 Cupcake: Strawberry, Pink, 10 Cupcake: Vanilla, Tan, 11 Cupcake: Chocolate, Brown, 12 class [LREPL.$JShell$27$Cupcake; 9 Generic: Cupcake listed by flavor Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate . Monkey Character Class . class Monkies extends Generics { // Class data, generics framework public static KeyTypes key = KeyType.title; public static void setOrder(KeyTypes key) { Monkies.key = key; } public enum KeyType implements KeyTypes {title, name, age, color, size, weight} // All of our data private final String name; private final int age; private final String color; private final String size; private final int weight; // Monkies constructor public Monkies (String name, int age, String color, String size, int weight){ super.setType(&quot;Monkey&quot;); this.name = name; this.age = age; this.color = color; this.size = size; this.weight = weight; } //Helps enforce KeyTypes usage @Override protected KeyTypes getKey() { return Monkies.key; } //Requires toString override @Override public String toString() { String output = &quot;&quot;; if (KeyType.name.equals(this.getKey())){ output += this.name; } else if (KeyType.age.equals(this.getKey())){ output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else if (KeyType.size.equals(this.getKey())){ output += this.size; } else if (KeyType.weight.equals(this.getKey())){ output += &quot;00&quot; + this.age; output = output.substring((output.length()- 2)); } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age + &quot;, &quot; + this.size + &quot;, &quot; + this.weight; } return output; } //test data public static Monkies[] monkies(){ return new Monkies[]{ new Monkies(&quot;Mr. Gorilla&quot;, 20, &quot;Purple&quot;, &quot;Large&quot;, 400), //gorilla new Monkies(&quot;Chimpy&quot;, 3, &quot;Blue&quot;, &quot;Medium&quot;, 70), //chimpanzee new Monkies(&quot;Mrs. Orangutan&quot;, 25, &quot;Green&quot;, &quot;Medium&quot;, 100), //oragutan new Monkies(&quot;Babson&quot;, 15, &quot;Orange&quot;, &quot;Small&quot;, 40), //baboon }; } //tests Monkies class public static void main(String[] args){ Monkies[] objs = monkies(); Monkies.setOrder(KeyType.title); Monkies.print(objs); } } Monkies.main(null); . class [LREPL.$JShell$29$Monkies; 4 Generic: Monkey listed by title Monkey: Mr. Gorilla, Purple, 20, Large, 400 Monkey: Chimpy, Blue, 3, Medium, 70 Monkey: Mrs. Orangutan, Green, 25, Medium, 100 Monkey: Babson, Orange, 15, Small, 40 . Checkpoint 2 - Hacks and Experimentation . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); this.deleteList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { //adds a count for every iteration this.count++; //prints enqueued data System.out.println(&quot;Enqueued data: &quot; + data); //inserts data at the end of the queue this.queue.add(data); //prints System.out.print(this.name + &quot;count: &quot; + count + &quot;, data: &quot;); //for each element x in the queue made from &quot;this.queue.add(data)&quot; for (T x : queue){ //prints element and a space System.out.print(x + &quot; &quot;); } System.out.println(); System.out.println(); } } /** * Add a list of objects to queue */ public void deleteList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { //subtracts a count for every iteration this.count--; //prints enqueued data System.out.println(&quot;Enqueued data: &quot; + data); //inserts at the end of the queue this.queue.delete(); //prints System.out.print(this.name + &quot;count: &quot; + count + &quot;, data: &quot;); //for each element x in the queue made from &quot;this.queue.add(data)&quot; for (T x : queue){ //prints element and a space System.out.print(x + &quot; &quot;); } System.out.println(); System.out.println(); } } /*peek into the first term of the two queues, compare them to see which is smaller then add the smaller one to a third queue and delete the term from the queue that had the smaller term. Repeat using a loop */ public void mergeQueue(){ } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Merge queues Object [] nums1 = new Integer[]{ 1, 4, 5, 8 }; Object [] nums2 = new Integer[]{ 2, 3, 6, 7 }; // Create iterable Queue of Words Object[] words = new String[] {&quot;Mr. Gorilla&quot;, &quot;Chimpy&quot;, &quot;Babson&quot;, &quot;Mrs. Orangutan&quot; }; QueueManager qWords = new QueueManager(&quot;Words&quot;, words); qWords.printQueue(); // Create iterable Queue of Integers Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers ); qNums.printQueue(); // Create iterable Queue of NCS Generics Animal.setOrder(Animal.KeyType.name); Alphabet.setOrder(Alphabet.KeyType.letter); Cupcake.setOrder(Cupcake.KeyType.flavor); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qGenerics.printQueue(); // Create iterable Queue of Mixed types of data /* QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( words, numbers, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qMix.queue.add(&quot;End&quot;); qMix.printQueue(); */ } } QueueTester.main(null); . Enqueued data: Mr. Gorilla Wordscount: 1, data: Mr. Gorilla Enqueued data: Chimpy Wordscount: 2, data: Mr. Gorilla Chimpy Enqueued data: Babson Wordscount: 3, data: Mr. Gorilla Chimpy Babson Enqueued data: Mrs. Orangutan Wordscount: 4, data: Mr. Gorilla Chimpy Babson Mrs. Orangutan Enqueued data: Mr. Gorilla Wordscount: 3, data: Chimpy Babson Mrs. Orangutan Enqueued data: Chimpy Wordscount: 2, data: Babson Mrs. Orangutan Enqueued data: Babson Wordscount: 1, data: Mrs. Orangutan Enqueued data: Mrs. Orangutan Wordscount: 0, data: Words count: 0 Words data: Enqueued data: 0 Integerscount: 1, data: 0 Enqueued data: 1 Integerscount: 2, data: 0 1 Enqueued data: 2 Integerscount: 3, data: 0 1 2 Enqueued data: 3 Integerscount: 4, data: 0 1 2 3 Enqueued data: 4 Integerscount: 5, data: 0 1 2 3 4 Enqueued data: 5 Integerscount: 6, data: 0 1 2 3 4 5 Enqueued data: 6 Integerscount: 7, data: 0 1 2 3 4 5 6 Enqueued data: 7 Integerscount: 8, data: 0 1 2 3 4 5 6 7 Enqueued data: 8 Integerscount: 9, data: 0 1 2 3 4 5 6 7 8 Enqueued data: 9 Integerscount: 10, data: 0 1 2 3 4 5 6 7 8 9 Enqueued data: 0 Integerscount: 9, data: 1 2 3 4 5 6 7 8 9 Enqueued data: 1 Integerscount: 8, data: 2 3 4 5 6 7 8 9 Enqueued data: 2 Integerscount: 7, data: 3 4 5 6 7 8 9 Enqueued data: 3 Integerscount: 6, data: 4 5 6 7 8 9 Enqueued data: 4 Integerscount: 5, data: 5 6 7 8 9 Enqueued data: 5 Integerscount: 4, data: 6 7 8 9 Enqueued data: 6 Integerscount: 3, data: 7 8 9 Enqueued data: 7 Integerscount: 2, data: 8 9 Enqueued data: 8 Integerscount: 1, data: 9 Enqueued data: 9 Integerscount: 0, data: Integers count: 0 Integers data: Enqueued data: A My Genericscount: 1, data: A Enqueued data: B My Genericscount: 2, data: A B Enqueued data: C My Genericscount: 3, data: A B C Enqueued data: D My Genericscount: 4, data: A B C D Enqueued data: E My Genericscount: 5, data: A B C D E Enqueued data: F My Genericscount: 6, data: A B C D E F Enqueued data: G My Genericscount: 7, data: A B C D E F G Enqueued data: H My Genericscount: 8, data: A B C D E F G H Enqueued data: I My Genericscount: 9, data: A B C D E F G H I Enqueued data: J My Genericscount: 10, data: A B C D E F G H I J Enqueued data: K My Genericscount: 11, data: A B C D E F G H I J K Enqueued data: L My Genericscount: 12, data: A B C D E F G H I J K L Enqueued data: M My Genericscount: 13, data: A B C D E F G H I J K L M Enqueued data: N My Genericscount: 14, data: A B C D E F G H I J K L M N Enqueued data: O My Genericscount: 15, data: A B C D E F G H I J K L M N O Enqueued data: P My Genericscount: 16, data: A B C D E F G H I J K L M N O P Enqueued data: Q My Genericscount: 17, data: A B C D E F G H I J K L M N O P Q Enqueued data: R My Genericscount: 18, data: A B C D E F G H I J K L M N O P Q R Enqueued data: S My Genericscount: 19, data: A B C D E F G H I J K L M N O P Q R S Enqueued data: T My Genericscount: 20, data: A B C D E F G H I J K L M N O P Q R S T Enqueued data: U My Genericscount: 21, data: A B C D E F G H I J K L M N O P Q R S T U Enqueued data: V My Genericscount: 22, data: A B C D E F G H I J K L M N O P Q R S T U V Enqueued data: W My Genericscount: 23, data: A B C D E F G H I J K L M N O P Q R S T U V W Enqueued data: X My Genericscount: 24, data: A B C D E F G H I J K L M N O P Q R S T U V W X Enqueued data: Y My Genericscount: 25, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Enqueued data: Z My Genericscount: 26, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Enqueued data: Lion My Genericscount: 27, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Enqueued data: Pig My Genericscount: 28, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Enqueued data: Robin My Genericscount: 29, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Enqueued data: Cat My Genericscount: 30, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Enqueued data: Kitty My Genericscount: 31, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Enqueued data: Dog My Genericscount: 32, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Enqueued data: Red Velvet My Genericscount: 33, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Enqueued data: Orange My Genericscount: 34, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Enqueued data: Lemon My Genericscount: 35, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Enqueued data: Apple My Genericscount: 36, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Enqueued data: Blueberry My Genericscount: 37, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Enqueued data: Blackberry My Genericscount: 38, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Enqueued data: Strawberry My Genericscount: 39, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Enqueued data: Vanilla My Genericscount: 40, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Enqueued data: Chocolate My Genericscount: 41, data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: A My Genericscount: 40, data: B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: B My Genericscount: 39, data: C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: C My Genericscount: 38, data: D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: D My Genericscount: 37, data: E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: E My Genericscount: 36, data: F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: F My Genericscount: 35, data: G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: G My Genericscount: 34, data: H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: H My Genericscount: 33, data: I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: I My Genericscount: 32, data: J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: J My Genericscount: 31, data: K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: K My Genericscount: 30, data: L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: L My Genericscount: 29, data: M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: M My Genericscount: 28, data: N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: N My Genericscount: 27, data: O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: O My Genericscount: 26, data: P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: P My Genericscount: 25, data: Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Q My Genericscount: 24, data: R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: R My Genericscount: 23, data: S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: S My Genericscount: 22, data: T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: T My Genericscount: 21, data: U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: U My Genericscount: 20, data: V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: V My Genericscount: 19, data: W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: W My Genericscount: 18, data: X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: X My Genericscount: 17, data: Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Y My Genericscount: 16, data: Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Z My Genericscount: 15, data: Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Lion My Genericscount: 14, data: Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Pig My Genericscount: 13, data: Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Robin My Genericscount: 12, data: Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Cat My Genericscount: 11, data: Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Kitty My Genericscount: 10, data: Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Dog My Genericscount: 9, data: Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Red Velvet My Genericscount: 8, data: Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Orange My Genericscount: 7, data: Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Lemon My Genericscount: 6, data: Apple Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Apple My Genericscount: 5, data: Blueberry Blackberry Strawberry Vanilla Chocolate Enqueued data: Blueberry My Genericscount: 4, data: Blackberry Strawberry Vanilla Chocolate Enqueued data: Blackberry My Genericscount: 3, data: Strawberry Vanilla Chocolate Enqueued data: Strawberry My Genericscount: 2, data: Vanilla Chocolate Enqueued data: Vanilla My Genericscount: 1, data: Chocolate Enqueued data: Chocolate My Genericscount: 0, data: My Generics count: 0 My Generics data: . &lt;/div&gt; | . | . | .",
            "url": "https://calissat.github.io/ws/2023/03/14/generictypes.html",
            "relUrl": "/2023/03/14/generictypes.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Data Types Week 25",
            "content": "Key Terms . Reference Data: Reference to memory location, address points to where the variables are actually located. Used to store complex data structures (objects/arrays) | Primitives: Local variables, stored directly in memory and passed by value | Wrapper Class: A class that wraps a primitive data type into an object | . Auto-boxing: Int converting to a class Integer, it does this automatically . // Both of these create new objects Integer n = 5; // Auto-boxing, Integer n = new Integer(5); n += 5; // Auto-boxing, Integer n = new Integer(n + 5); . Examples . // Binary addition example adding 5 and 6 //setting our binary string values String five = &quot;0101&quot;; String six = &quot;0110&quot;; //converting binary strings to decimal number int num1 = Integer.parseInt(five, 2); int num2 = Integer.parseInt(six, 2); //Adding two decimals together int sum = num1 + num2; //Converting decimal to binary string String eleven = Integer.toBinaryString(sum); System.out.println(&quot;Eleven&quot;); System.out.println(eleven); . Eleven 1011 . //passes by value public class IntByValue { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n += 10: n = &quot; + n); // prints 5 n = n += 10; System.out.println(&quot; tAfter n += 10: n = &quot; + n); // prints 10 } public static void main(String[] args) { //starts with int n int n = 5; System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 //changes int to 15 changeInt(n); //still prints out 5, because it changeInt uses reference //and makes its own n, which is not the same as the local n in main System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } IntByValue.main(null); . Main method before changeInt(n): n = 5 In changeInt method Before n += 10: n = 5 After n += 10: n = 15 Main method after changeInt(n): n = 5 . //passes by value public class IntegerByValueOrReference { public static void changeInteger(Integer n) { System.out.println(&quot;In changeInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n += 10; // behind the scenes, this is: n = new Integer(n+10) System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { Integer n = 5; System.out.println(&quot;Main method before changeInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeInteger(n); System.out.println(&quot;Main method after changeInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } IntegerByValueOrReference.main(null); . Main method before changeInteger(n): n = 5 hash code = 5 In changeInteger method Before change: n = 5 hash code = 5 After change: n = 15 hash code = 15 Main method after changeInteger(n): n = 5 hash code = 5 . //passes by reference //swaps values to low high order import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 558640399 In changeAtomicInteger method Before change: n = 5 hash code = 558640399 After change: n = 15 hash code = 558640399 Main method after changeAtomicInteger(n): n = 15 hash code = 558640399 . //passes by reference public class IntByReference { //property/attribute of the class private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 . Exploring Datatypes . Method and Control Structures FRQ 2022 . Users of a website are asked to provide a review of the website at the end of each visit. Each review, represented by an object of the Review class, consists of an integer indicating the user’s rating of the website and an optional String comment field. The comment field in a Review object ends with a period (&quot;.&quot;), exclamation point (&quot;!&quot;), or letter, or is a String of length 0 if the user did not enter a comment. . public class Review { private int rating; private String comment; /** Precondition: r &gt;= 0 * c is not null. */ public Review(int r, String c) { rating = r; comment = c; } public int getRating() { return rating; } public String getComment() { return comment; } // There may be instance variables, constructors, and methods that are not shown. } . The ReviewAnalysis class contains methods used to analyze the reviews provided by users. You will write two methods of the ReviewAnalysis class. . public class ReviewAnalysis { /** All user reviews to be included in this analysis */ private Review[] allReviews; /** Initializes allReviews to contain all the Review objects to be analyzed */ public ReviewAnalysis() { /* implementation not shown */ } /** Returns a double representing the average rating of all the Review objects to be * analyzed, as described in part (a) * Precondition: allReviews contains at least one Review. * No element of allReviews is null. */ public double getAverageRating() { /* to be implemented in part (a) */ } /** Returns an ArrayList of String objects containing formatted versions of * selected user comments, as described in part (b) * Precondition: allReviews contains at least one Review. * No element of allReviews is null. * Postcondition: allReviews is unchanged. */ public ArrayList&lt;String&gt; collectComments() { /* to be implemented in part (b) */ } } . (Part A) . Write the ReviewAnalysis method getAverageRating, which returns the average rating (arithmetic mean) of all elements of allReviews. For example, getAverageRating would return 3.4 if allReviews contained the following Review objects. . 0 1 2 3 4 . 4 | 3 | 5 | 2 | 3 | . &quot;Good! Thx&quot; | &quot;OK site&quot; | &quot;Great! | &quot;Poor! Bad. &quot; | &quot; &quot; | . Complete method getAverageRating. /** Returns a double representing the average rating of all the Review objects to be * analyzed, as described in part (a) * Precondition: allReviews contains at least one Review. * No element of allReviews is null. */ public double getAverageRating() . public double getAverageRating(){ //total sum of ratings int totalRating = 0; //amount of ratings in allReviews int reviewNums = 0; for (Review rating : allReviews){ //adds rating value to total totalRating += rating.getRating(); //adds one to count of total number of ratings reviewNums += 1; } //creates new double value for average double averageRating = totalRating / reviewNums; return averageRating; } . (Part B) . Write the ReviewAnalysis method collectComments, which collects and formats only comments that contain an exclamation point. The method returns an ArrayList of String objects containing copies of user comments from allReviews that contain an exclamation point,formatted as follows. An empty ArrayList is returned if no comment in allReviews contains an exclamation point. . The String inserted into the ArrayList to be returned begins with the index of the Review in allReviews. | The index is immediately followed by a hyphen (&quot;-&quot;). | The hyphen is followed by a copy of the original comment. | The String must end with either a period or an exclamation point. If the original comment from allReviews does not end in either a period or an exclamation point, a period is added. | . The following example of allReviews is repeated from part (a) | 0 | 1 | 2 | 3 | 4 | | -- | -- | -- | -- | -- | | 4 | 3 | 5 | 2 | 3 | | &quot;Good! Thx&quot; | &quot;OK site&quot; | &quot;Great! | &quot;Poor! Bad. &quot; | &quot; &quot; | . public ArrayList&lt;String&gt; collectComments() { //creates new strings arrayList called commentsTotal ArrayList&lt;String&gt; commentsTotal = new ArrayList&lt;String&gt;(); //for each review in allReview for(int i = 0; i &lt; allReviews.length; i++) { //gets a comment from allReviews String comment = allReviews[i].getComment(); //gets the index of the ! if there is one if(comment.indexOf(&quot;!&quot;) &gt;= 0) { //prints index with &quot;-&quot; then comment String formatted = i + &quot;-&quot; + comment; //creates lastChar, which stores the last character in the formatted string String lastChar = formatted.substring(formatted.length() - 1); //if the lastChar isn&#39;t &quot;!&quot; or &quot;.&quot; it adds a period if( ! lastChar.equals(&quot;!&quot;) &amp;&amp; ! lastChar.equals(&quot;.&quot;)) formatted += &quot;.&quot;; //adds all the formatted comments into commentsTotal commentsTotal.add(formatted); } } return commentsTotal; } .",
            "url": "https://calissat.github.io/ws/2023/03/06/datatypes.html",
            "relUrl": "/2023/03/06/datatypes.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Tri 2 Reflection",
            "content": "Technical Accomplishments . Over the course of this trimester, I struggled to understand assignments and overall Java concepts. Because of this, I feel that I was not able to complete tasks fully and to the expectations of the class.Despite this, I gave my best effort and pushed myself to try and understand and do newer and harder things. . Throughout the duration of PBL, I stuck my hands onto almost every page of backend, and many pages on frontend. I needed to understand what was going on in our project before I even knew where to start. I found myself helping around the project a lot, whether it be deployment, database errors, and frontend. Through this, I was kind of able to understand how our database works, the different tables in it, and GET/POST methods. . Later on, I started with JWT. When first trying to add JWT to our site, I ran into a lot of Beans errors. I never thought seeing a Beans error could make me so angry, but I ended up fixing like 5. It took me a while to do this, about a week or so, and I realized I was really wasting time trying to fix everyone&#39;s errors because our project was not functional yet. So, I moved on to trying to get JWT to actually work. Although I know that in order to authenticate people through login you need to give the user a cookie that gives them an identity and the permission to access certain pages, I couldn&#39;t really figure out how to do this. I asked some peers for help, but I realized that what seemed to make sense to them didn&#39;t make sense to me. I spent a while staring at the JWT blogs on the APCSA website and I feel that I understand the concept of JWT very well. However, I have been unable to execute and actually put much down in code. After spending several days trying to figure it out, like an unwise coder would do, I gave up. . Full Stack . My full stack project was getting a functional signup page running. Since previously, we had already laid out the frontend for the signup, I needed to figure out how I was going to have the signup create a new person in our database. . With some help from Mr. M, I was able to get a little push towards the right direction. I was able to lay down the foundation of my code, and made some changes so that the ids in the POST method matched the ids and columns in our database, which I had to mess around with. . I quickly ran into some errors though, as upon present sign up, the POST would fail. Through this, I learned some handy dandy debugging tricks through Mr. M, and with his help discovered that the first issue was that there were conflicting ids. So, this was a pretty easy fix that just needed the ids to be renamed to nm and psw. . After this, through the debugger, I noticed that my create_user function now worked and was able to collect the data from each input. However, it still was unable to create a new person. I kept getting fetch errors, but I only had a few days to try and get it working before N@TM. Unfortunately, I was unable to fix it before that, and instead resorted to manually inputting data into our database through Postman (but hey, at least our database works). . I was never really able to get the signup to fully work, but I tried my best and learned some tricks for next trimester if I ever get stuck. .",
            "url": "https://calissat.github.io/ws/2023/02/27/tri2blog.html",
            "relUrl": "/2023/02/27/tri2blog.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 9 Inheritance",
            "content": "Protected variables: access modifier so attribute isn&#39;t affected by outside modifier . Subclass: Extends from a superclass . Overriding: You can override a method by using the @Override above the method you wish to override . Polymorphism: When a method has many forms (overriding) . Method Overloading: Two methods with same name but different arguments . //super class Dog public class Dog { //protected variables protected String coatTexture; protected String color; protected String size; public Dog(String coatTexutre, String color, String size){ this.coatTexture = coatTexture; this.color = color; this.size = size; } //bark method public void bark(){ System.out.println(&quot;Bark!&quot;); } } //sub class siberianHusky public class SiberianHusky extends Dog { protected String sheds; public SiberianHusky (String coatTexture, String color, String size, String sheds){ super(coatTexture, color, size); this.sheds = sheds; } //overriding the bark method @Override public void bark(){ System.out.println(&quot;Woof!&quot;); } public static void main(String[] args){ Dog husky = new SiberianHusky(&quot;Double Coat&quot;, &quot;Black and White&quot;, &quot;Large&quot;, &quot;Heavy Shedder&quot;); husky.bark(); } } SiberianHusky.main(null); //sub class pug . Woof! . public class Pug extends Dog { public Pug (String coatTexture, String color, String size){ super(coatTexture, color, size); } //Runtime polymorphism (overriding again) @Override public void bark(){ System.out.println(&quot;Grrrr!&quot;); } public void xxx() { System.out.println(&quot;xxx zero args&quot;); } //method overloading public void toeBeans(int a) { System.out.println(&quot;This pug has &quot; + a + &quot; toe beans&quot;); } //method overloading public void toeBeans(int a, int b){ System.out.println(&quot;This pug has &quot; + a + &quot; toe beans on its &quot; + b + &quot; feet&quot; ); } public static void main(String[] args){ Pug pug = new Pug(&quot;Short Coat&quot;, &quot;Any Color!&quot;, &quot;Small&quot;); pug.bark(); pug.toeBeans(4); pug.toeBeans(4, 4); } } Pug.main(null); . Grrrr! This pug has 4 toe beans This pug has 4 toe beans on its 4 feet .",
            "url": "https://calissat.github.io/ws/java/2022/12/13/unit9.html",
            "relUrl": "/java/2022/12/13/unit9.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 8 2D Arrays",
            "content": "Hack 1 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! int row = arr.length - 1; int col = arr[0].length - 1; System.out.println(arr[row][col]); } } Test.main(null); . i . Hack 2 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! arr[2][0] = &quot;Athens&quot;; System.out.println(arr[2][0]); } } Test.main(null); . Athens . Hack 3 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! int r = arr.length; int c = arr[0].length; for (int row = 0; row &lt; r; row++) { for (int col= 0; col &lt; c; col++){ System.out.print(arr[row][col] + &quot;, &quot; ); } } } } Test.main(null); . Atlanta, Baltimore, Chicago, Australia, Boston, Cincinnati, Austin, Beaumont, Columbus, . Hack 4 . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! int r = arr.length; int c = arr[0].length; for (int row = 0; row &lt; r; row++) { for (int col= 0; col &lt; c; col++){ if (arr[row][col].length() &gt; longest.length()){ longest = arr[row][col]; } } } System.out.print(longest); } } Test.main(null); . Cincinnati . Christmas Tree . public class Tree { public static void main(String args[]) { String[][] tree = { {&quot; &quot; ,&quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}, {&quot; &quot;, &quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;, &quot; &quot;}, {&quot; &quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot; &quot;}, {&quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;, &quot;*&quot;}, {&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}, }; int r = tree.length; int c = tree[0].length; for (int row = 0; row &lt; r; row++){ for (int col = 0; col &lt; c; col++){ System.out.print(tree[row][col]); } System.out.println(&quot; &quot;); } } } Tree.main(null); . * *** ***** ******* M .",
            "url": "https://calissat.github.io/ws/java/2022/12/06/unit8.html",
            "relUrl": "/java/2022/12/06/unit8.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Tech Terms",
            "content": "Casting . Type casting is when you assign a value of one primitive data type to another type. . Widening: (automatically) - converting a smaller type to a larger type size . Narrowing: (manually) - converting a larger type to a smaller size type . // casting in the case of division public class division{ public static void main(String args[]){ int a = 2; int b = 3; System.out.println(b/a); } } division.main(null); . 1 . public class casting{ public static void main(String args[]){ int a = 2; double b = a; double c = 2.99; int d = (int)c; System.out.println(&quot;Widening&quot;); System.out.println(a); System.out.println(b); System.out.println(&quot;&quot;); System.out.println(&quot;Narrowing&quot;); System.out.println(c); System.out.println(d); } } casting.main(null); . Widening 2 2.0 Narrowing 2.99 2 . Wrapper Classes . In cases such as arrayLists, sometimes data can only be stored as objects. To get around this, we used wrapper classes to store primitive data types as objects. . These wrapper classes also have corresponding methods . ArrayList&lt;int&gt; myNumbers = new ArrayList&lt;int&gt;(); // it cannot store integers . | ArrayList&lt;int&gt; myNumbers = new ArrayList&lt;int&gt;(); // it cannot store integers unexpected type required: reference found: int | ArrayList&lt;int&gt; myNumbers = new ArrayList&lt;int&gt;(); // it cannot store integers unexpected type required: reference found: int . ArrayList&lt;Integer&gt; myNumbers = new ArrayList&lt;Integer&gt;(); // stores the object as an integer wrapper class . Concatenation . Concatenation is combining two or more strings using the &quot;+&quot;, &quot;+=&quot;, or concat() method . You must use the Datatype.toString(var) method to convert different datatypes to strings . public class concat{ public static void main(String args[]){ String text1 = &quot;ora&quot;; String text2 = &quot;nge&quot;; String fruit1 = text1 + text2; String fruit2 = text1.concat(text2); System.out.println(fruit1); System.out.println(fruit2); } } concat.main(null); . orange orange . Math Class . The Java Math class provides several methods to perform calculations and other functions involving numbers. . public class random{ public static void main(String args[]){ double random = Math.random(); System.out.println(random); } } random.main(null); . 0.4452733827420724 . Compound Boolean Expressions . Using the (AND) &amp;&amp; and (OR) || operations in conditionals . public class compoundBooleans { public static void main(String args[]){ int a = 1; if (a &lt; 10 &amp;&amp; a &gt; 0){ System.out.println(&quot;a is between 0 and 10&quot;); } else { System.out.println(&quot;a is either negative or greater than 10&quot;); } } } compoundBooleans.main(null); . a is between 0 and 10 . Truth Tables . Booleans return only true or false, and we use truth tables to organize the outputs of an operation . a=true, b=false, c=true, d=true . | AND OR XOR . A, B False | True | True | . C, D True | True | False | . De Morgan&#39;s Law . A law that simplifies boolean expressions . Examples: !(a &amp;&amp; b) is equivalent to !a || !b !(a || b) is equivalent to !a &amp;&amp; !b . Comparing Numbers . You can use the compare() method or an == operator to compare two different numeric values. . The compare() method returns 0 if true, -1 if value one is less than value two, and 1 if value one is greater than value two . public class comparingNumbers { public static void main(String args[]){ int a = 3; int b = 3; System.out.println(Integer.compare(a, b)); System.out.println(a == b); } } comparingNumbers.main(null); . 0 true . Comparing Strings . There are many ways to compare strings. Some of the common ways include using the String.equals() method . Here is a link to other possible methods . public class comparingStrings { public static void main(String args[]){ String fruit = new String(&quot;Banana&quot;); String fruit2 = new String(&quot;Banana&quot;); System.out.println(fruit.equals(fruit2)); } } comparingStrings.main(null); . true . Comparing Objects . Similarly to numbers and strings, you can use the == operators or the equals() method. . == will see if the objects have the same identity, while .equals will see if the objects hold the same value . It is also common to use the assert method which must be imported. Here are outside examples . public class comparingObjects { public static void main(String args[]){ Integer a = new Integer(1); Integer b = new Integer(1); if(a.equals(b)){ System.out.println(&quot;true&quot;); } else{ System.out.println(&quot;false&quot;); } } } comparingObjects.main(null); . true . For Loops and Enhanced For Loops . For loops are a great tool for iteration. For loops can be incremented by whatever value you wish, while enhanced for loops (for-each) must execute code in a sequence. . Enhanced for loops are often used to traverse arrays/arrayLists . import java.io.*; import java.util.*; public class forLoops{ public static void main(String args[]) { //for loop for (int i = 0; i &lt; 6; i+=2 ){ System.out.print(&quot;Code &quot;); } //enhanced for loop int[] num = { 1, 2, 3}; for (int a : num) { System.out.print(a); } } } forLoops.main(null); . Code Code Code 123 . While Loop vs. Do While Loop . While loops execute a block of code while a condition is true . While do loops execute code until a condition is true . public class whileLoop{ public static void main(String args[]) { //while loop int a = 3; while ( a &gt; 0 ){ System.out.print(&quot;code &quot;); a--; } //while do loop int b = 3; do { System.out.println(b); a++; } while (b &gt; 7); } } whileLoop.main(null); . code code code 3 . Nested Loops . Nested loops are loops within loops . public class nestedLoops { public static void main(String[] args) { int weeks = 2; int days = 7; // outer loop prints weeks for (int i = 1; i &lt;= weeks; ++i) { System.out.println(&quot;Week: &quot; + i); // inner loop prints days for (int j = 1; j &lt;= days; ++j) { System.out.println(&quot; Day: &quot; + j); } } } } nestedLoops.main(null); . Week: 1 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 Week: 2 Day: 1 Day: 2 Day: 3 Day: 4 Day: 5 Day: 6 Day: 7 . Creating a Class . A class is a blueprint for creating object and contains attributes and methods . public class Class { int x = 5; public static void main(String[] args) { Class obj = new Class(); System.out.println(obj.x); } } Class.main(null); . 5 . Constructor . A constructor is a special method that is used to initialize objects . // Create a Main class public class Main { int x; // Create a class attribute // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } public static void main(String[] args) { Main myObj = new Main(); // Create an object of class Main (This will call the constructor) System.out.println(myObj.x); // Print the value of x } } // Outputs 5 Main.main(null); . 5 . Accessor Methods . Accessor methods return value of private variables and give other classes access to that value . public class accessor{ private int num; //An accessor method public int getBalance(){ return this.num; } } . Mutator Methods . Mutator methods reset the value of a private variable and gives other classes to change the value stored in the variable . public class mutator{ private int num; //A mutator method public void setNum(int newNum){ this.num = newNum; } } . Static Variables and Class Variables . Both static and non-static methods can access or change the values of static variables . Access Modifiers (Public, Private, Protected) . public: anyone can access . private: only are accessible within the class . protected: can only be accessed within its own package . Static Methods and Class Methods . Static methods can be called within a program without creating an object of a class. . Static methods are associated with the class as a whole . // static method public static int getTotal(int a, int b) { return a + b; } public static void main(String[] args) { int x = 3; int y = 2; System.out.println(getTotal(x,y)); // Prints: 5 } . this Keyword . The this keyword is used to designate difference between instance variables and local variables. Variables with this. reference an instance variable . public class Keyword{ public void exampleMethodOne(){ System.out.println(&quot;Hello&quot;); } public void exampleMethodTwo(){ //Calling a method using this. this.exampleMethodOne(); System.out.println(&quot;There&quot;); } } .",
            "url": "https://calissat.github.io/ws/java/2022/11/28/techterms.html",
            "relUrl": "/java/2022/11/28/techterms.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "FRQ Method and Control Structures",
            "content": "Static Method: . Method is a part of a class rather than an instance of that class | Every instance of a class has access to the method | . public class APCalendar { /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int count = 0; //everything between year1 and year 2 for (int i = year1; i &lt;= year2; i++){ //if i is a leap year if (isLeapYear(i)){ count++; } else { } } return count; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { //adds first day of year and the current day of year, subtract one to avoid duplicate int daysIntoYear = firstDayOfYear(year) + dayOfYear(month, day, year) - 1; //total amount of days it has been int dayOfWeek = daysIntoYear % 7; //divides by 7 days of week return dayOfWeek; } // There may be instance variables, constructors, and other methods not shown. } .",
            "url": "https://calissat.github.io/ws/java/2022/11/15/FRQ1.html",
            "relUrl": "/java/2022/11/15/FRQ1.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 3 HW",
            "content": "// #2 import java.util.Scanner; public class quadratic { public static void main(String[] Strings) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = sc.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = sc.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = sc.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } quadratic.main(null); . Input a: Input b: Input c: The roots are -0.20871215252208009 and -4.7912878474779195 . // #4 import java.util.Scanner; public class evenOdd { public static void main(String[] args){ Scanner sc = new Scanner(System.in); System.out.println(&quot;Pick your number...&quot;); double input = sc.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } evenOdd.main(null); . Pick your number... Positive number . // #6 import java.util.Scanner; public class decimals { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Input floating-point number: &quot;); double x = sc.nextDouble(); System.out.println(&quot;Input floating-point another number: &quot;); double y = sc.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } decimals.main(null); . Input floating-point number: Input floating-point another number: They are different . // #8 import java.util.Scanner; public class vowelConsonant { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = sc.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Please enter a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;That&#39;s not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(input + &quot;is vowel&quot;); } else { System.out.println(input + &quot; is consonant&quot;); } } } vowelConsonant.main(null); . Input an alphabet: d is consonant . // #10 public class naturalNumbers { public static void main(String[] args) { int i; System.out.print(&quot;The first 10 natural numbers are: &quot;); for (i=1; i&lt;=10; i++) { System.out.print(i + &quot;, &quot;); } } } naturalNumbers.main(null); . The first 10 natural numbers are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, . // #12 import java.util.Scanner; public class average { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input 5 numbers &quot;); } for (i=0;i&lt;5;i++) { Scanner sc = new Scanner(System.in); n = sc.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of those numbers is: &quot; +s+&quot; nThe Average is: &quot; +avg); } } average.main(null); . Input 5 numbers The sum of those numbers is: 16 The Average is: 3.0 . // #14 import java.util.Scanner; public class multiplicationTable { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number&quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner sc = new Scanner(System.in); n = sc.nextInt(); System.out.println (&quot; n&quot;); for(j=0; j&lt;=n; j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } multiplicationTable.main(null); . Input the numberInput number of terms : 4 X 0 = 0 4 X 1 = 4 4 X 2 = 8 4 X 3 = 12 4 X 4 = 16 . // #16 import java.util.Scanner; public class triangle { public static void main(String[] args) { int i,j,n; System.out.println(&quot;Input number of rows&quot;); Scanner sc = new Scanner(System.in); n = sc.nextInt(); for(i=1; i&lt;=n; i++) { for(j=1; j&lt;=i; j++) System.out.print(&quot;*&quot;); System.out.println(&quot;&quot;); } } } triangle.main(null); . Input number of rows * ** *** . // #18 import java.util.Scanner; public class patternTriangle { public static void main(String[] args) { int i,j,n,k=1; System.out.println(&quot;Input number of rows&quot;); Scanner sc = new Scanner(System.in); n = sc.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1; j&lt;=i; j++) System.out.print(k++ + &quot; &quot;); System.out.println(&quot;&quot;); } } } patternTriangle.main(null); . Input number of rows 1 2 3 4 5 6 . // #20 import java.util.Scanner; public class floydTriangle { public static void main(String[] args) { int numberOfRows; System.out.println(&quot;Input number of rows&quot;); Scanner sc = new Scanner(System.in); numberOfRows = sc.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } floydTriangle.main(null); . Input number of rows 1 2 3 4 5 6 7 8 9 10 .",
            "url": "https://calissat.github.io/ws/java/2022/10/24/unit3hw.html",
            "relUrl": "/java/2022/10/24/unit3hw.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2 HW",
            "content": "public class WordMatch { /* The secret string */ private String secret; /* Constructs a WordMatch object with the given secret string of lowercase letters */ public WordMatch (String word){ /* implementation not shown */ } /* Returns a score for guess, as describe in part (a) * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess (String guess){ int value = 0; int length = guess.length(); for (int i = 0; i&lt;= secret.length - length; i+=1){ String a = secret.substring(i, i+length); if (a.equals(guess)){ value++; } return value*length*length; } } /* Returns the better of two guesses, as determined by scoreGuess and the rules a * tie breaker that are describe in part (b) * Precondition: guess 1 and guess 2 are all lowercase letters. * guess 1 is not the same as guess 2 */ public String findBetterGuess(String guess1, String guess2){ int x = scoreGuess(guess1); int y = scoreGuess(guess2); if (x &gt; y) return guess1; if (y &gt; x) return guess2; } } . | for (int i = 0; i&lt;= secret.length - length; i+=1){ cannot find symbol symbol: variable length | public int scoreGuess (String guess){ | int value = 0; | int length = guess.length(); | for (int i = 0; i&lt;= secret.length - length; i+=1){ | String a = secret.substring(i, i+length); | if (a.equals(guess)){ | value++; | } | return value*length*length; | } | } missing return statement | public String findBetterGuess(String guess1, String guess2){ | /* to be implemented in part (b) */ | } missing return statement .",
            "url": "https://calissat.github.io/ws/java/2022/10/23/unit2hw.html",
            "relUrl": "/java/2022/10/23/unit2hw.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 1 HW",
            "content": "import java.util.Scanner; public class gradeCalculator { public static void main(String[] args){ Scanner sc = new Scanner(System.in); System.out.println(&quot;Is your final in in its own category? (true/false)&quot;); boolean testCategory = sc.nextBoolean(); if (testCategory = true){ //current grade System.out.println(&quot;What is your current grade?&quot;); float currentGrade = sc.nextInt(); currentGrade /= 100; //percentage of final System.out.println(&quot;What percentage is the final?&quot;); float percentOfGrade = sc.nextInt(); percentOfGrade /= 100; //desired grade System.out.println(&quot;What grade do you want in the class?&quot;); float desiredGrade = sc.nextInt(); desiredGrade /= 100; //grade needed calculation float gradeNeeded = ((desiredGrade - ((1 - percentOfGrade)* currentGrade)) / percentOfGrade) * 100; System.out.println(&quot;You need a &quot; + gradeNeeded + &quot;%&quot;); } else { /* //current grade System.out.println(&quot;What is your current grade?&quot;); float currentGrade2 = sc.nextInt(); currentGrade2 /= 100; //percentage of grade in test category System.out.println(&quot;What percentage of your grade is the test category?&quot;); float testCategory2 = sc.nextInt(); testCategory2 /= 100; //what is their percentage in test category System.out.println(&quot;What is your percentage in the test category?&quot;); float percentInTest = sc.nextInt(); percentInTest /= 100; //how many points are in test category System.out.println(&quot;How many points is in the test category?&quot;); float pointsInTest = sc.nextInt(); //how many points are in test category System.out.println(&quot;How many points is your final?&quot;); float pointsInFinal = sc.nextInt(); System.out.println(&quot;What grade do you want in the class?&quot;); float desiredGrade = sc.nextInt(); desiredGrade /= 100; //I have no clue how to calculate this and I&#39;m too lazy to figure it out */ System.out.println(&quot;You need a score&quot;); } } } gradeCalculator.main(null); . Is your final in in its own category? (true/false) What is your current grade? What percentage is the final? What grade do you want in the class? You need a 129.99995% .",
            "url": "https://calissat.github.io/ws/java/2022/10/23/unit1hw.html",
            "relUrl": "/java/2022/10/23/unit1hw.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "ArrayList",
            "content": "Arrays . Can hold any datatype (ex: primitives or objects) but have fixed size . ArrayList . Can only hold objects but you can change their size. Can get around the limitation of datatypes by using a wrapper class of whatever primitive data type you want to put (ex: Integer for int) . They&#39;re kind of like a wrapper around Java&#39;s arrays that make them easier to use . import java.util.Arrays; import java.util.ArrayList; public class ArrayVArrayList { public static void main(String[] args){ //Declaring an Array // Also can do: String[] scrumArray = new String[4]; //initializes string array and must give size // ^^ all 4 elements are null until they are set String[] scrumArray = {&quot;Calissa&quot;, &quot;Evan&quot;, &quot;Kian&quot;, &quot;Samuel&quot;}; //initializes values right away, size is implied //Declaring an ArrayList // Also can do: ArrayList&lt;String&gt; scrumArrayList = new ArrayList&lt;&gt;(); //instantiate arraylist, must declare datatype, uses diamond (&lt;&gt;) operator ArrayList&lt;String&gt; scrumArrayList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Calissa&quot;, &quot;Evan&quot;, &quot;Kian&quot;, &quot;Samuel&quot;)); //passes .asList method (values you want to have in your arrayList) //Getting value from Array System.out.println(scrumArray[1]); //Getting value from Array System.out.println(scrumArrayList.get(1)); //Getting length from Array System.out.println(scrumArray.length); //field on array //Getting length from ArrayList System.out.println(scrumArrayList.size()); //size is method call //Adding element to end of ArrayList scrumArrayList.add(&quot;John&quot;); //calls add method, pass element you want to add System.out.println(scrumArrayList.get(4)); //Change element in Array scrumArray[1] = &quot;Hassan&quot;; System.out.println(scrumArray[1]); //Change element in ArrayList scrumArrayList.set(1, &quot;Hassan&quot;); System.out.println(scrumArrayList.get(1)); //Remove element in ArrayList /* * Note: Can also do scrumArrayList.remove(&quot;ObjectName&quot;); */ scrumArrayList.remove(1); System.out.println(scrumArrayList.get(1)); //Print Array System.out.println(scrumArray); //gives memory address //^^In order to print array you have to do a for loop and iterate over all elements System.out.println(scrumArrayList); //implemented two string method so it prints out nicely } } ArrayVArrayList.main(null); . Evan Evan 4 4 John Hassan Hassan Kian [Ljava.lang.String;@438de3d0 [Calissa, Kian, Samuel, John] .",
            "url": "https://calissat.github.io/ws/java/labs/2022/10/06/ArrayList.html",
            "relUrl": "/java/labs/2022/10/06/ArrayList.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "ASCII Art",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;orca&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { //two columns for every row is (2 x 1 block) for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 245) { str = &quot; &quot;; } else if (g &gt;= 238) { str = &quot;¸&quot;; } else if (g &gt;= 230) { str = &quot;&#39;&quot;; } else if (g &gt;= 220) { str = &quot;.&quot;; } else if (g &gt;= 215) { str = &quot;-&quot;; } else if (g &gt;= 210){ str = &quot;~&quot;; } else if (g &gt;= 200) { str = &quot;^&quot;; } else if (g &gt;= 190) { str = &quot;+&quot;; } else if (g &gt;= 170) { str = &quot;*&quot;; } else if (g &gt;= 140) { str = &quot;=&quot;; } else if (g &gt;= 120) { str = &quot;&amp;&quot;; } else if (g &gt;= 110) { str = &quot;%&quot;; } else if (g &gt;= 80) { str = &quot;#&quot;; } else if (g &gt;= 60) { str = &quot;@&quot;; } else if (g &gt;= 0) { str = &quot;■&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics orca = new Pics(&quot;orca&quot;, &quot;png&quot;); orca.printStats(&quot;Original&quot;); orca.resize(33); orca.printStats(&quot;Scaled&quot;); orca.convertToAscii(); Pics dog = new Pics(&quot;dog&quot;, &quot;png&quot;); dog.printStats(&quot;Original&quot;); dog.resize(33); dog.printStats(&quot;Scaled&quot;); dog.convertToAscii(); } } Pics.main(null); . Original: 139741 959x713 images/orca.png Scaled: 175513 316x235 images/tmp/orca.png Original: 28979 640x321 images/dog.png Scaled: 63703 211x106 images/tmp/dog.png .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/27/ASCII.html",
            "relUrl": "/java/labs/2022/09/27/ASCII.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Weather API",
            "content": "Implementation of Weather API . I think it would be a cool front end feature to have the color/design of the homepage to match the weather . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //imports for API HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://visual-crossing-weather.p.rapidapi.com/forecast?aggregateHours=24&amp;location=Washington%2CDC%2CUSA&amp;contentType=csv&amp;unitGroup=us&amp;shortColumnNames=0&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;d7c8c8031emshc7982f51947d6d4p19192fjsnc28f123f5152&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;visual-crossing-weather.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . Address,Date time,Latitude,Longitude,Resolved Address,Name,Wind Direction,Minimum Temperature,Maximum Temperature,Temperature,Wind Speed,Cloud Cover,Heat Index,Chance Precipitation (%),Precipitation,Sea Level Pressure,Snow Depth,Snow,Relative Humidity,Wind Gust,Wind Chill,Conditions &#34;Washington,DC,USA&#34;,&#34;10/02/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,23.9,51.5,51.9,51.7,14.0,100.0,,100.0,0.04,1022.0,0.0,0.0,89.9,33.8,,&#34;Rain, Overcast&#34; &#34;Washington,DC,USA&#34;,&#34;10/03/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,94.4,46.1,52.4,49.3,10.1,98.0,,100.0,0.39,1022.2,0.0,0.0,84.9,38.9,40.7,&#34;Rain, Overcast&#34; &#34;Washington,DC,USA&#34;,&#34;10/04/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,239.6,51.3,59.4,53.9,8.0,100.0,,85.7,0.0,1018.8,0.0,0.0,63.4,30.0,39.1,&#34;Rain, Overcast&#34; &#34;Washington,DC,USA&#34;,&#34;10/05/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,324.8,49.7,51.7,50.7,12.8,99.4,,57.1,0.23,1015.0,0.0,0.0,87.6,32.2,44.7,&#34;Rain, Overcast&#34; &#34;Washington,DC,USA&#34;,&#34;10/06/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,272.2,51.3,71.9,61.0,4.2,11.1,,0.0,0.0,1015.5,0.0,0.0,57.2,9.6,,&#34;Clear&#34; &#34;Washington,DC,USA&#34;,&#34;10/07/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,290.5,49.0,66.8,59.4,8.7,1.7,,19.0,0.0,1016.6,0.0,0.0,55.6,25.7,45.3,&#34;Clear&#34; &#34;Washington,DC,USA&#34;,&#34;10/08/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,307.1,43.6,59.6,50.7,8.6,13.5,,4.8,0.0,1022.8,0.0,0.0,52.5,26.2,38.7,&#34;Clear&#34; &#34;Washington,DC,USA&#34;,&#34;10/09/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,296.2,43.8,62.5,52.0,5.8,0.6,,0.0,0.0,1023.8,0.0,0.0,47.3,19.2,40.7,&#34;Clear&#34; &#34;Washington,DC,USA&#34;,&#34;10/10/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,279.6,45.9,67.2,55.2,5.6,15.2,,9.5,0.0,1023.7,0.0,0.0,44.2,21.5,43.5,&#34;Clear&#34; &#34;Washington,DC,USA&#34;,&#34;10/11/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,245.6,51.9,68.6,59.0,6.3,2.2,,4.8,0.0,1024.3,0.0,0.0,46.6,27.5,,&#34;Clear&#34; &#34;Washington,DC,USA&#34;,&#34;10/12/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,217.8,51.7,71.1,60.7,3.3,27.1,,4.8,0.0,1024.7,0.0,0.0,53.3,18.6,,&#34;Partially cloudy&#34; &#34;Washington,DC,USA&#34;,&#34;10/13/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,262.5,58.4,76.6,66.3,3.4,27.4,,14.3,0.0,1018.8,0.0,0.0,63.9,16.3,,&#34;Partially cloudy&#34; &#34;Washington,DC,USA&#34;,&#34;10/14/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,152.4,60.3,77.3,67.1,3.3,33.7,,19.0,0.0,1023.1,0.0,0.0,65.8,11.2,,&#34;Partially cloudy&#34; &#34;Washington,DC,USA&#34;,&#34;10/15/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,118.3,60.9,65.2,62.5,2.0,97.0,,14.3,0.0,1024.6,0.0,0.0,72.1,8.2,,&#34;Overcast&#34; &#34;Washington,DC,USA&#34;,&#34;10/16/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,86.7,58.7,62.7,60.7,2.3,90.6,,4.8,0.12,1027.2,0.0,0.0,90.0,7.8,,&#34;Overcast&#34; &#34;Washington,DC,USA&#34;,&#34;10/17/2022&#34;,38.8904,-77.032,&#34;Washington, DC, United States&#34;,&#34;Washington,DC,USA&#34;,147.1,58.0,68.3,62.2,3.1,82.9,,28.6,0.0,1027.7,0.0,0.0,81.4,11.6,,&#34;Overcast&#34; . HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://weatherapi-com.p.rapidapi.com/current.json?q=92127&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;d7c8c8031emshc7982f51947d6d4p19192fjsnc28f123f5152&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;weatherapi-com.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); public class weatherBackground { public static void main(String[] args){ } } . {&#34;location&#34;:{&#34;name&#34;:&#34;San Diego&#34;,&#34;region&#34;:&#34;California&#34;,&#34;country&#34;:&#34;USA&#34;,&#34;lat&#34;:33.02,&#34;lon&#34;:-117.1,&#34;tz_id&#34;:&#34;America/Los_Angeles&#34;,&#34;localtime_epoch&#34;:1665600304,&#34;localtime&#34;:&#34;2022-10-12 11:45&#34;},&#34;current&#34;:{&#34;last_updated_epoch&#34;:1665599400,&#34;last_updated&#34;:&#34;2022-10-12 11:30&#34;,&#34;temp_c&#34;:21.1,&#34;temp_f&#34;:70.0,&#34;is_day&#34;:1,&#34;condition&#34;:{&#34;text&#34;:&#34;Overcast&#34;,&#34;icon&#34;:&#34;//cdn.weatherapi.com/weather/64x64/day/122.png&#34;,&#34;code&#34;:1009},&#34;wind_mph&#34;:5.6,&#34;wind_kph&#34;:9.0,&#34;wind_degree&#34;:270,&#34;wind_dir&#34;:&#34;W&#34;,&#34;pressure_mb&#34;:1020.0,&#34;pressure_in&#34;:30.11,&#34;precip_mm&#34;:0.0,&#34;precip_in&#34;:0.0,&#34;humidity&#34;:76,&#34;cloud&#34;:100,&#34;feelslike_c&#34;:21.1,&#34;feelslike_f&#34;:70.0,&#34;vis_km&#34;:13.0,&#34;vis_miles&#34;:8.0,&#34;uv&#34;:5.0,&#34;gust_mph&#34;:3.4,&#34;gust_kph&#34;:5.4}} .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/27/API.html",
            "relUrl": "/java/labs/2022/09/27/API.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Javascript Notebook",
            "content": "function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } //creation of Person function, class object, and JSON //this refers to an object function Person(name, grade, ghID, icon, role) { this.name = name; this.grade = grade; this.ghID = ghID; this.icon = icon; this.role = &quot;&quot;; } // setter for icon in Person data Person.prototype.setRole = function(role){ this.role = role; } //defines JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function(){ const obj = {name: this.name, grade: this.grade, ghID: this.ghID, icon: this.icon, role: this.role}; const json = JSON.stringify(obj); //useful to pass data on internet return json; } var teacher = new Person(&quot;Mr. M&quot;, &quot;0&quot;, &quot;jm1021&quot;, &quot;Owl&quot;) var students = [ new Person(&quot;Calissa&quot;, &quot;12&quot;, &quot;CalissaT&quot;, &quot;Pink Bird&quot;), new Person(&quot;Evan&quot;, &quot;12&quot;, &quot;deimie&quot;, &quot;Blue Bird&quot;), new Person(&quot;Samuel&quot;, &quot;12&quot;, &quot;Samuelwaang&quot;, &quot;Orange Bird&quot;), new Person(&quot;Kian&quot;, &quot;12&quot;, &quot;kiannp44&quot;, &quot;Yellow Bird&quot;), new Person(&quot;Mr. M Jr&quot;, &quot;12&quot;, &quot;Mrmjr123&quot;, &quot;Brown Bird&quot;), ]; function Classroom(teacher, students){ //classroom starts with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; //students are added this.students = students; this.students.forEach(student =&gt; {student.setRole(&quot;Student&quot;); this.classroom.push(student); }); //json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object . object ; [ Person { name: &#39;Mr. M&#39;, grade: &#39;0&#39;, ghID: &#39;jm1021&#39;, icon: &#39;Owl&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Calissa&#39;, grade: &#39;12&#39;, ghID: &#39;CalissaT&#39;, icon: &#39;Pink Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Evan&#39;, grade: &#39;12&#39;, ghID: &#39;deimie&#39;, icon: &#39;Blue Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Samuel&#39;, grade: &#39;12&#39;, ghID: &#39;Samuelwaang&#39;, icon: &#39;Orange Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Kian&#39;, grade: &#39;12&#39;, ghID: &#39;kiannp44&#39;, icon: &#39;Yellow Bird&#39;, role: &#39;Student&#39; }, Person { name: &#39;Mr. M Jr&#39;, grade: &#39;12&#39;, ghID: &#39;Mrmjr123&#39;, icon: &#39;Brown Bird&#39;, role: &#39;Student&#39; } ] . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em lightseagreen;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Icon&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].icon + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGradeGitHub IDIconRole . Mr. M | 0 | jm1021 | Owl | Teacher | Calissa | 12 | CalissaT | Pink Bird | Student | Evan | 12 | deimie | Blue Bird | Student | Samuel | 12 | Samuelwaang | Orange Bird | Student | Kian | 12 | kiannp44 | Yellow Bird | Student | Mr. M Jr | 12 | Mrmjr123 | Brown Bird | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://calissat.github.io/ws/javascript/2022/09/25/javascript.html",
            "relUrl": "/javascript/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 4 HW",
            "content": "public class CaesarCipher { public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;Kfzb gly!&quot;; System.out.println(cipher(message1)); String message2 = &quot;zlab zlab zlab&quot;; System.out.println(cipher(message2)); String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipher(message3)); } public static String cipher (String message){ String decoded = &quot;&quot;; //for every letter in the message for (int i = 0; i &lt; message.length(); i++){ //charAt returns value at specified index //if the character at the index is greater than the index of a but less than the index of z if(message.charAt(i) &lt; &#39;a&#39; || message.charAt(i) &gt; &#39;z&#39;){ decoded += message.charAt(i); continue; } //the index of the letter int letter = message.charAt(i)-&#39;a&#39;; //adds three and uses the modulo operator to ensure it doesn&#39;t overflow int new_letter = (letter+3)%26; decoded += (char)(new_letter+&#39;a&#39;); } return decoded; } } CaesarCipher.main(null); . Kice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://calissat.github.io/ws/java/2022/09/22/unit4hw.html",
            "relUrl": "/java/2022/09/22/unit4hw.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Fibonacci",
            "content": "Original Code . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/22/fibonacci.html",
            "relUrl": "/java/labs/2022/09/22/fibonacci.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "FRQs",
            "content": "2019 FRQ 1 - Methods and Control Structures . I used the website Link to run my code and check if it passed. This website has good resources for APCSA prompts . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. public class APCalendar { / Returns true if year is a leap year and false otherwise. / private static boolean isLeapYear(int year) { / implementation not shown */ } / Returns the number of leap years between year1 and year2, inclusive. Precondition: 0 &lt;= year1 &lt;= year2 / public static int numberOfLeapYears(int year1, int year2) { / to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, | where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. / private static int firstDayOfYear(int year) { / implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. | Returns 1 for January 1 (month = 1, day = 1) of any year. | Precondition: The date represented by month, day, year is a valid date. / private static int dayOfYear(int month, int day, int year) { / implementation not shown */ } /** Returns the value representing the day of the week for the given date | (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. / public static int dayOfWeek(int month, int day, int year) { / to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } | . | Part A . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. . In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ . public static int numberOfLeapYears(int year1, int year2) . | . //PART A import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int numLeapYears = 0; for(int i =year1 ; i &lt;= year2; i++ ){ //loops while i (year1) &lt;= year2 if (isLeapYear(i)){ numLeapYears = numLeapYears + 1; //adds one every time there is a leap year } else { //else does nothing } } return numLeapYears; } /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { return new GregorianCalendar().isLeapYear(year); } public static void main(String[] args) { int answer = APCalendar.numberOfLeapYears(2000, 2050); System.out.println(&quot;Your answer should be 13: &quot; + answer); } } . Part B . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . import java.util.Calendar; import java.util.GregorianCalendar; public class APCalendar { /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int divisor = 7; /* divides by seven and uses remainder to determine what day of the week it is int day1 = 7; //sunday int day2 = 8; //monday int day3 = 9; //tuesday */ int daysIntoYear = firstDayOfYear(year) + dayOfYear(month, day, year) -1; /* Adds the first day of the year, and then how many days its been in the year. Then, you must subtract 1 since day of year includes the first day, so it would be an extra day */ int dayOfWeek = daysIntoYear % divisor; return dayOfWeek; } public static void main(String[] args) { int answer = APCalendar.dayOfWeek(1, 8, 2019); System.out.println(&quot;Your answer should be 2: &quot; + answer); } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { GregorianCalendar gc = new GregorianCalendar(year, Calendar.JANUARY, 1); return gc.get(Calendar.DAY_OF_WEEK) - 1; } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { GregorianCalendar gc = new GregorianCalendar(year, month - 1, day); return gc.get(Calendar.DAY_OF_YEAR); } } /* * Should return 13. */ .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/19/frqs.html",
            "relUrl": "/java/labs/2022/09/19/frqs.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Array",
            "content": "Fish Poem . class fishLoop{ String [][] fish; public fishLoop(){ fish = new String[][]{ // 1 fish { &quot; One Fish &quot;, //[0][0] &quot; _///_ &quot;, //[0][1] &quot; /o |/ &quot;, //[0][2] &quot; &gt; ))_.|- &quot;, //[0][3] &quot; &lt; &quot; //[0][4] }, // 2 fish { &quot; Two Fish &quot;, //[1][0] &quot; .-=-. , &quot;, //[1][1] &quot;(o &gt;&lt; &quot;, //[1][2] &quot; `-=-&#39; ` &quot;, //[1][3] &quot; /// &quot; //[1][4] }, // red fish { &quot; Red Fish &quot;, //[2][0] &quot; . )| &quot;, //[2][1] &quot; |`.-&#39; `-oo &quot;, //[2][2] &quot; ) _ __,0)&quot;, //[2][3] &quot; /.&#39; )/ &quot; //[2][4] }, //blue fish { &quot; Blue Fish &quot;, //[3][0] &quot; )| &quot;, //[3][1] &quot; .- -. &quot;, //[3][2] &quot; )|| (( o ) &quot;, //[3][3] &quot; )/&#39;&#39;&#39;--&#39; &quot; , //[3][4] }, }; } public void printFish(){ System.out.println(); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); System.out.println(&quot;Under the sea there are...&quot;); int count = 4; for (int row = 0;row &lt; count; row++){ for (int col = 0; col &lt; fish[row].length; col++){ System.out.print(fish[row][col] + &quot; &quot;); System.out.println(); } } count -= 1; } public static void main(String[] args) { new fishLoop().printFish(); } } fishLoop.main(null); . ~~~~~~~~~~~~~~~~~~~~~~~~~~ Under the sea there are... One Fish _///_ /o |/ &gt; ))_.|- &lt; Two Fish .-=-. , (o &gt;&lt; `-=-&#39; ` /// Red Fish . )| |`.-&#39; `-oo ) _ __,0) /.&#39; )/ Blue Fish )| .- -. )|| (( o ) )/&#39;&#39;&#39;--&#39; . class fishLoop{ String [][] fish; public fishLoop(){ fish = new String[][]{ // 1 fish { &quot;~~~~~~~~~~~~~&quot;, //[0][0] &quot; _///_ &quot;, //[0][1] &quot; /o |/ &quot;, //[0][2] &quot; &gt; ))_.|- &quot;, //[0][3] &quot; &lt; &quot; //[0][4] }, // 2 fish { &quot;~~~~~~~~~~~~~&quot;, //[1][0] &quot; .-=-. , &quot;, //[1][1] &quot;(o &gt;&lt; &quot;, //[1][2] &quot; `-=-&#39; ` &quot;, //[1][3] &quot; /// &quot; //[1][4] }, // red fish { &quot;~~~~~~~~~~~~~&quot;, //[2][0] &quot; . )| &quot;, //[2][1] &quot; |`.-&#39; `-oo &quot;, //[2][2] &quot; ) _ __,0)&quot;, //[2][3] &quot; /.&#39; )/ &quot; //[2][4] }, //blue fish { &quot;~~~~~~~~~~~~~&quot;, //[3][0] &quot; )| &quot;, //[3][1] &quot; .- -. &quot;, //[3][2] &quot; )|| (( o ) &quot;, //[3][3] &quot; )/&#39;&#39;&#39;--&#39; &quot; , //[3][4] }, }; } public void printFish(){ System.out.println(); System.out.println(&quot;Blub blub blub&quot;); int count = fish.length; for (int i = count; i&gt;=1; i--){ int a = fish[0].length; for (int row = 0; row &lt; a; row++){ for (int col = 0; col &lt; count; col++){ System.out.print(fish[col][row] + &quot; &quot;); } System.out.println(&quot; &quot;); } count -= 1; } System.out.println(&quot;Fish swimming in the sea...&quot;); } public static void main(String[] args) { new fishLoop().printFish(); } } fishLoop.main(null); . Blub blub blub ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ _///_ .-=-. , . )| )| /o |/ (o &gt;&lt; |`.-&#39; `-oo .- -. &gt; ))_.|- `-=-&#39; ` ) _ __,0) )|| (( o ) &lt; /// /.&#39; )/ )/&#39;&#39;&#39;--&#39; ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ _///_ .-=-. , . )| /o |/ (o &gt;&lt; |`.-&#39; `-oo &gt; ))_.|- `-=-&#39; ` ) _ __,0) &lt; /// /.&#39; )/ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~ _///_ .-=-. , /o |/ (o &gt;&lt; &gt; ))_.|- `-=-&#39; ` &lt; /// ~~~~~~~~~~~~~ _///_ /o |/ &gt; ))_.|- &lt; Fish swimming in the sea... .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/13/array.html",
            "relUrl": "/java/labs/2022/09/13/array.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Java Conditionals",
            "content": "If-Else Statements . If-Else statements are conditional statements that determine which section of code to run. . /* Example 1: If condition is not true, else is executed */ int x = 5; // variable x if (x&lt;4){ // the line of code within the if statement will not be executed as x is not less than 4 System.out.println(&quot;X is less than 4&quot;); } else { // the line of code within the else statement is executed because first condition is not true System.out.println(&quot;X is greater than 4&quot;); } . X is greater than 4 . /* Example 2: If condition is true, else is not executed */ int x = 3; // variable x if (x&lt;4){ // the line of code within the if statement will be executed as x is less than 4 System.out.println(&quot;X is less than 4&quot;); } else { // the line of code within the else statement is not executed because first condition is true System.out.println(&quot;X is greater than 4&quot;); } . X is less than 4 . If-Elseif-Else Statements . If-Elseif-Else statements are another conditional statement, this time with 3 different code segments to execute from. Both the if and elseif need a condition, while the else does not. . /* Example 3: If condition false, else if condition true. Else if code is executed */ int x = 2; // variable x if (x&lt;4 &amp;&amp; x&gt;3 ){ // the line of code within the if statement will not be executed, as x is not between 3 and 4 System.out.println(&quot;X is less than 4&quot;); } else if (x == 2){ // the line of code within the else if statement is executed as x is equal to 2 System.out.println(&quot;X is equal to 2&quot;); } else { // the line of code within the else statement is not executed because the previous condition is true System.out.println(&quot;X is greater than 4&quot;); } . X is equal to 2 . Switch-case . There are many ways to write code. In the case of conditionals, a switch case can be used to replace a if-elseif-else statement. In a switch statement, one of many code blocks will be executed. . // this is an if-else-else statement String cheese = &quot;Gouda&quot;; if (cheese == &quot;Cheddar&quot;){ // tests if cheese = cheddar System.out.println(&quot;Cheddar originated in Somerset&quot;); } else if (cheese == &quot;Gouda&quot;){ // tests if cheese = gouda System.out.println(&quot;Gouda originated in the Netherlands&quot;); } else if (cheese == &quot;Milk&quot;){ // tests if cheese = milk System.out.println(&quot;Milk is made from cows, goats, and other mammals&quot;); } else if (cheese == &quot;Cheese&quot;){ // tests if cheese = cheese System.out.println(&quot;Cheese is very yummy&quot;); } else{ // if cheese is none of these System.out.println(&quot;Sorry, I don&#39;t have any information about &quot; + cheese); } . Gouda originated in the Netherlands . //the statement above can also be written like: String cheese = &quot;Gouda&quot;; switch(cheese) { case &quot;Cheddar&quot;: // tests if cheese = cheddar System.out.println(&quot;Cheddar originated in Somerset&quot;); break; case &quot;Gouda&quot;: // tests if cheese = gouda System.out.println(&quot;Gouda originated in the Netherlands&quot;); break; case &quot;Milk&quot;: // tests if cheese = milk System.out.println(&quot;Milk is made from cows, goats, and other mammals&quot;); break; case &quot;Cheese&quot;: // tests if cheese = cheese System.out.println(&quot;Cheese is very yummy&quot;); default: // if cheese is none of these System.out.println(&quot;Sorry, I don&#39;t have any information about &quot; + cheese); } . Gouda originated in the Netherlands . De Morgan&#39;s Law . De Morgan&#39;s Law illustrates how compound boolean expressions are read. It helps you simplify code and your logic operators. . boolean a = true; boolean b = false; if (!(a &amp;&amp; b)){ System.out.println(&quot;!(true &amp;&amp; false) is true&quot;); } else { System.out.println(&quot;!(true &amp;&amp; false) is false&quot;); } . !(true &amp;&amp; false) is true .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/07/conditionals.html",
            "relUrl": "/java/labs/2022/09/07/conditionals.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;-&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Math&quot;); System.out.println(&quot;5 - Tree&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, my name is Calissa!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: Scanner input = new Scanner(System.in); System.out.println(&quot;Pick the first number to multiply&quot;); int choice1 = input.nextInt(); //gets input box System.out.println(&quot;Pick the second number to multiply&quot;); int choice2 = input.nextInt(); System.out.print(choice1 + &quot; * &quot; + choice2 + &quot; = &quot; + (choice1*choice2)); break; case 5: Scanner sc5 = new Scanner(System.in); System.out.println(&quot;Pick a height for your tree!&quot;); int tree = sc5.nextInt(); //gets input box for (int i = 0; i &lt; tree; i++) { //rows for (int j = 0; j &lt; tree - i; j++) //prints spaces System.out.print(&quot; &quot;); for (int k = 0; k &lt; (2 * i + 1); k++) //prints asterisks System.out.print(&quot;*&quot;); System.out.println(); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Math 5 - Tree 0 - Quit - 5: Pick a height for your tree! * *** ***** ******* 4: Pick the first number to multiply Pick the second number to multiply 0 * 0 = 0 0: Goodbye, World! .",
            "url": "https://calissat.github.io/ws/java/labs/2022/09/01/menu.html",
            "relUrl": "/java/labs/2022/09/01/menu.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Primitives Notebook",
            "content": "public class DefinePrimitives { public static void main(String[] args) { int anInt = 3; double aDouble = 2.7; boolean aBoolean = true; // not primitives String aString = &quot;Primitives&quot;; // wrapper class shortcut assignment String aStringFormal = new String(&quot;Primitives are cool!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) . anInt: 3 aDouble: 2.7 aBoolean: true aString: Primitives aStringFormal: Primitives are cool! . public class primitivesMath { public static void main(String[] args){ int added = 0 + 3; double subtracted = 3 - 0.3; int divided = 39 / 3; double multiplied = 0.5 * 2; System.out.println(&quot;I should get a &quot; + added + &quot; on this assignment&quot;); System.out.println(&quot;You get a &quot; + subtracted + &quot; if you do the bullet points&quot;); System.out.println(divided + &quot; is my favorite number&quot;); System.out.println(&quot;I have &quot; + multiplied + &quot; dog&quot;); } } primitivesMath.main(null) . I should get a 3 on this assignment You get a 2.7 if you do the bullet points 13 is my favorite number I have 1.0 dog .",
            "url": "https://calissat.github.io/ws/java/2022/08/28/primitives.html",
            "relUrl": "/java/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Fixing Java Kernel",
            "content": "The Problem . I tried to run a simple java code segment in my note book but it gave me this error . Failed to start the Kernel. Kernel Java is not usable . The Solution . Disclaimer: There is definitely a more convenient way to do this, and since I am not an expert I realize that I have like zero idea what I’m talking about . Step 1: Uninstall basically everything on your computer . pip3 uninstall jupyter pip3 uninstall jupyter_core pip3 uninstall jupyter-client pip3 uninstall jupyter-console pip3 uninstall notebook pip3 uninstall qtconsole pip3 uninstall nbconvert pip3 uninstall nbformat pip uninstall ipykernel pip uninstall jupyterlab-server pip uninstall jupyterlab . I got these commands from a very nice lady on GitHub Link . Step 2: Start reinstalling things . I have no idea what those lines deleted but just I just followed Mr. M’s commands to reinstall things that I probably already had installed but I just wanted to make sure . $ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install $ java --version # version of runtime $ javac --version # version of compiler (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels (base) id:~$ # start in home directory (base) id:~$ pip install bash_kernel # download bash kernel . This is when I realized that there might be something wrong with my bash because it gave me a weird response, and this is where I discovered that it was in fact broken . Step 3: Fix Bash . pip uninstall bash_kernel pip install bash_kernel . It then give me a list of conflicts because the things we needed installed were uninstalled . Type this commands into terminal: . conda install -c conda-forge rtree . For more information click: Link . Then, uninstall and reinstall bash again . pip uninstall bash_kernel pip install bash_kernel . And it fixed it somehow . Important note! . Don’t forget to reinstall things such as nbformat, or anything not covered by the conda-forge rtree line! It will cause issues later with Jupyter notebooks .",
            "url": "https://calissat.github.io/ws/markdown/2022/08/26/fixingjava.html",
            "relUrl": "/markdown/2022/08/26/fixingjava.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Bash Notebook",
            "content": "echo &quot;Welcome to my bash page&quot; . Welcome to my bash page . cd ls . Applications Library install.py Creative Cloud Files Movies java Desktop Music opt Documents Pictures spring_portfolio Downloads Public vscode Experimenting ijava-1.3.0.zip ws IdeaProjects ijava-1.3.0.zip.1 . pwd . /Users/calissa . python --version java --version javac --version . Python 3.9.12 openjdk 11.0.16.1 2022-08-12 OpenJDK Runtime Environment Homebrew (build 11.0.16.1+0) OpenJDK 64-Bit Server VM Homebrew (build 11.0.16.1+0, mixed mode) javac 11.0.16.1 . jupyter kernelspec list . Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/calissa/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python3912jvsc74a57bd09961afd50ddbee2a31a7c4a950441f89c9f7e572a5e9be13392b2ff72436ece0 /Users/calissa/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd09961afd50ddbee2a31a7c4a950441f89c9f7e572a5e9be13392b2ff72436ece0 bash /Users/calissa/Library/Jupyter/kernels/bash java /Users/calissa/Library/Jupyter/kernels/java javascript /Users/calissa/Library/Jupyter/kernels/javascript python3 /Users/calissa/opt/anaconda3/share/jupyter/kernels/python3 . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/spring_portfolio # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /Users/calissa/vscode exists. Directory /Users/calissa/vscode/spring_portfolio exists. .",
            "url": "https://calissat.github.io/ws/bash/2022/08/25/bash.html",
            "relUrl": "/bash/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Welcome",
            "content": "Welcome . This is the official Welcome Page of Calissa’s Fastpages. . . Get to know me… . Things I like: . Whales | Sloths | Food | . . My favorite food: . Tacos | Pasta | Omelettes | A nice quote: . People say nothing is impossible, but I do nothing everyday. . . A nice alert box . Information",
            "url": "https://calissat.github.io/ws/markdown/2022/08/21/welcome.html",
            "relUrl": "/markdown/2022/08/21/welcome.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello welcome to my Python Notebook&quot;) . Hello welcome to my Python Notebook .",
            "url": "https://calissat.github.io/ws/python/2022/08/21/python.html",
            "relUrl": "/python/2022/08/21/python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Java Notebook",
            "content": "public class HelloStatic { public static void main(String[] args) { System.out.println(&quot;Hello! Welcome to my Java Notebook&quot;); } } HelloStatic.main(null); . Hello! Welcome to my Java Notebook .",
            "url": "https://calissat.github.io/ws/java/2022/08/21/java.html",
            "relUrl": "/java/2022/08/21/java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Tri 1 Blog",
          "content": "APCSP . I joined APCSP relatively new to coding, and pretty garbage at it. I remember making my “About Me Page” at the beginning of tri one, which was coded in HTML and consisted of an image and a couple &lt;p&gt; tags. I felt like I was about to be the next Bill Gates with these skills, but I was proven very wrong during the rest of the course. . Most of the time when Mr. M held TechTalks or our technical officers had a presentation on key topics, I used every ounce of my brain power to try and figure out what they were even talking about. Obviously, it didn’t work, and I spent most of the class very lost, stressed, and a little sad. . However, through this struggle I learned the magic of StackOverflow and my very smart teammates Akhil and Avinh. Whenever I had a I problem, I asked them and they would always help me. The very few instances in which they didn’t know why my code was broken, I went to Mr. M. . Now, this doesn’t sound like a very productive way to go through a computer science class, but as the class progressed, I slowly began learning more and more. Although I am no Anthony (an absolute legend), there were days when I made something good enough to make me feel like I was. . As the AP test approached, I genuinely thought I was going to fail because I was pretty incompetent and didn’t understand major concepts on College Board. So, I went on the grind, and started watching more CB videos and doing thorough test corrections on the practice AP tests we did in class. I got a 5 on the exam which was kind of a shocker . APCSA . Week 0: . I struggled to download literally everything because my computer is like jacked and just hates me. . Week 1: . After thinking I successfully downloaded everything, I realized my Java Kernel was broken and I had to go through this very long and painful process to fix it. In that process, I broke a lot of other things, which Mr. M so kindly fixed for me . Week 2: . I honestly don’t really understand what is going on right now. Java is significantly more confusing than Python and it lowkey hurts my brain. Doing the code.org lessons kind of helped, but I’m definitely struggling a lot. . Week 3: . I really enjoyed doing the boolean lab, it helped me solidify my knowledge of if-else and if-elseif-else statements. I learned about switch statements and De Morgan’s law. De Morgan’s law is a little confusing but I will pick it up eventually. My deployment mostly went smoothly besides the last step. I was able to get a domain and everything . Psychology and the Good Life: . We can control a lot more of our happiness than we think | Becoming happier takes a lot of effort | Money has a big influence on happiness Can create stress or pressure | . | . Like many others, I believe that success and prestige makes me happy. That’s why I stress so much about getting good grades, trying to get the best scores, and taking hard classes. I convince myself that the suffering and stress now will lead to happiness and wealth later. After watching this video, I’ve realized that although I want to be succesful, that is not the only thing that makes me happy. My friends, family, dog, videogames, and food are all things that make me happy. I also know that I have control over my mindset and actions, both of which influence a happy lifestyle. Living under the pressure of having to become what society deems “succesful” is hard, but the hardest kind of success is being happy with life and yourself. . Week 4: . I’m lowkey struggling with the array assignment thing because arrays confuse me. I don’t really understand how the whole printing thing works and all the different rows and columns. I enjoyed putting in my ASCII fish though. :) . Week 5: . My group has a good idea for a class manager for Mr. M and we made a wireframe and everything. I don’t really understand the fibo lab. I understand the concept of extends but have absolutely no idea how it works. . Week 6: . I was thinking of using a weather API to change the home page based on what the weather is outside. Our project is interesting to me because my teachers used to use a website called class dojo and I think it’d be cool if I could make something similar to that. The array images assignment was somewhat comprehensible and I was able to fix the scaling of the ASCII image. . Week 7: . I watched a YouTube video of some guy explaining arrayList and made a notebook page that is like a reference for me. I actually understand the purpose of an arrayList. I tried making a student arrayList and practiced adding and editing the values in the list. We have a very rough draft of our website going, but backend and frontend are not connected yet. . Week 8: . We were supposed to have presentations on Unit 1 and Unit 2 but since there was the plague going around school it was cancelled. . Week 9: . We made a video of our website and everyone’s role. Since I’m the scrum master, I basically explained all the collaboration and tools we are using to work on our website. We also got presentations on Unit 3-5. . Week 10: . We had a presentation on Arrays. Afterwards, Mr. M told us that we weren’t going to do anymore presentations because we needed to work on our projects. I’m slighly concerned given that our project barely had any features but I have confidence in my teammates . Week 11: . We were on the coding grind this week and were cranking out majority of our project this week. The day of Night at the M, we finally got frontend and backend working. Our project wasn’t great, but we at least had something tangible. . Week 12/AP MCQ . . Q17. Shift element in ID int array . . Wrong: {1, 2, 3, 4, 5, 6, 7} Right: {1, 2, 3, 5, 6, 7, 7} . Explanation: The for loop control variable k starts with the value 3, is incremented by 1 and terminates the loop when its value is arr.length – 1. In the first iteration, when k is 3, arr[3] is assigned the value arr[4]. The contents of the arr have been updated to {1, 2, 3, 5, 5, 6, 7}. In the second iteration, when k is 4, arr[4] is assigned the value arr[5]. The contents of arr have been updated to {1, 2, 3, 5, 6, 6, 7}. In the third iteration, when k is 5, arr[5] is assigned the value arr[6]. The contents of arr have been updated to {1, 2, 3, 5, 6, 7, 7}. Then k is incremented to 6 and the loop terminates. . Q18. Generate random index for ArrayList . . Explanation: The indices for myList are 0 through myList.size() – 1, for a total of myList.size() elements. Using Math.random()generates a random floating point number between 0 and 1, not including 1. When this value is multiplied by the number of elements we want in our range, myList.size(), a random floating point number between 0 and myList.size(), not including myList.size(), is generated. When this value is typecast as an int, the result is an integer value between 0 and myList.size() – 1 inclusive. . Q23. Manipulate method and animals List . . Wrong: [“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”] Right: [“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”] . Explanation: List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. In the second iteration, when k is 4, the element of animals at 4 (“cat”) does not start with a “b” and no changes are made to the list. In the third iteration, when k is 3, the element of animals at 3 (“bass”) starts with a “b”. This value is removed from the list and inserted at index 3. Since it was already at index 3, the list would not change. In the fourth iteration, when k is 2, the element of animals at 2 (“zebra”) does not start with a “b” and no changes are made to the list. In the fifth iteration, when k is 1, the element of animals at 1 (“baboon”) starts with a “b”. It is removed from the list and inserted at index 5. The list would then be {“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”}. Finally, k decrements to 0 which is not greater than 0 so the loop terminates. . Q24. Translate 1D array into 2D array enhanced for . . Wrong: 8 Right: 7 . Explanation: The enhanced for loop iterates over the array oldArray. In the first iteration, newArray[0][0] is assigned the value 1. The value of row is incremented to 1. Since 1 % 3 does not equal 0, the statements in the if are not executed. In the next iteration, newArray[1][0] is assigned the value 2. The value of row is incremented to 2. The algorithm continues to fill column 0 with the subsequent values of oldArray. Once row is 3, the if condition is true and row is assigned 0 and col is incremented to 1. The algorithm proceeds to fill column 1. When the for loop terminates, newArray contains the following values { {1, 4, 7}, {2, 5, 8}, {3, 6, 9} }. The value of newArray[0][2] is 7. . Q30. Scramble method with String and int parameters . . Wrong: “ilercomp” Right: “ilercom” . Explanation: The two parameter substring method returns the substring beginning at the first parameter and ending at the second parameter – 1. When word is assigned “compiler” and howFar is assigned 3, the value of word.substring(howFar + 1, word.length()) is “iler”. This is the substring of “compiler” beginning at 3 + 1 or 4 and ending at 8 – 1 or 7. The value of word.substring(0, howFar) is “com”. This is the substring of “compiler” beginning at 0 and ending at 2. The method returns “ilercom”. . Q34. Point and Circle Classes . . Wrong: II and III only Right: II only . Explanation: Choice I uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0, instead of x assigned the value a and y assigned the value b. Choice II correctly uses the two parameter Point constructor to create a new Point with x assigned the value a and y assigned the value b. Choice III uses the no parameter Point constructor to assign center a new Point with x and y both equal to 0. It attempts to update x and y, however since they are private instance variables in Point, they are not able to be accessed directly in Circle. This code will cause a compile time error. . Q39. Recur method with int parameter . . Wrong: 9 Right: 16 . Explanation: The call recur(27) returns the value of recur(recur(9)) since 27 is greater than 10. The call recur(9) returns 18, since 9 is less than or equal to 10. Therefore, recur(recur(9)) is recur(18). The call recur(18) returns recur(recur(6)) since 18 is greater than 10. The call recur(6) returns 12, since 6 is less than or equal to 10. Therefore, recur(recur(6)) is recur(12). The call recur(12) returns recur(recur(4)) since 12 is greater than 10. The call recur(4) returns 8, since 4 is less than or equal to 10. Therefore, recur(recur(4)) is recur(8). The call recur(8) returns 16, since 8 is less than or equal to 10. Therefore, recur(27)returns the value of 16. . Reflection: I missed 5 questions from unit 2 and 2 questions from unit 1, so I think those are areas that I need to focus on a little more. I tend to have difficulty fully understanding code, and I think I need to work on taking my time when reading it and trying to break it down piece by piece. .",
          "url": "https://calissat.github.io/ws/blog1/",
          "relUrl": "/blog1/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Tri 2 Blog",
          "content": "Week 13 . I started working on the College Board FRQ 1 before doing Mr. M’s more advanced hacks. I felt that this would be a better start for me since I struggle a lot with the Java concepts. I was kind of able to figure out how to do FRQ 1 by myself, so I moved onto the hacks. I made a couple methods myself, but ended up working with Evan on the harder ones. Honestly, he figured it out and made most of it because I had no idea what to do. He helped me understand what his code does which is very appreciated. We were also supposed to figure out how to add more endpoints, but I barely know what an endpoint is so I couldn’t do that. . Turkey . Over turkey, I tried to do FRQ 2. I realized I have no idea what is going on but I remained determined to at least finish part of the hacks. I had some people help me because I didn’t even know where to start and I was able to finish a few of the hacks. I somewhat understand what I did, and I hope to do better on future assignments. . Week 14 . I’ve been working on the vocab this week and it has been quite nice to slow down on the FRQs and take time to expand my Java knowledge. On Wednesday, my scrum team presented our presentation for the arrayList lesson and I think it went pretty well. . Week 15 . I actually understood the 2d Array content after working through it with Evan. I was able to do the extra credit Christmas tree all my myself without references or outside help!!! I was pretty proud. Here is a link to my work. . Overall, things are kind of starting to make more sense. Although a lot of things confuse me, I’m starting to understand the basics and more common ideas of java. . Week 16 . I’m very proud of the progress I am making in terms of my understanding of Java concepts. Although I am definetly not as good as most people in this class, the improvement I’ve seen in myself from the beginning of the first tri is impressive. . This week, I was able to complete the FRQ 4 hacks mostly by myself and I made a method that zeroed out an RGB value. I missed Monday, but on Tuesdays lesson I was able to complete all the hacks and I actually understood what I was doing! :) . Week 17 . This week was a warmup week to refresh our brains to the code we were doing before. . Week 18 . My group started brainstorming ideas for our project, and after some debate we landed on the idea of a dating site for friends. We wokred on the wireframe and prepared our presentation for next week. Mr. M also gave some tech talks about components we could inlcude into our website such as notes and security measures. . Week 19 . We presented on Tuesday on got some good feedback on what we can improve on our website. After hearing the feedback, I realize some of our features may be to complex, so we may try and make them more simple for now. . Over the weekend, I took the 66 question quiz. I honestly struggled because looking at code hurts my brain and I don’t understand it. But, I tried my best and managed to understand some of the questions. I definetly can use some of the questions on this test to study for the AP exam. I think one thing I need to work on is taking my time reading the question and trying to understand the code elements better. . Week 20 . I started working on frontend and the JWT. I don’t really fully understand it, but I will work on it. . For the quiz, I found that I struggled with more of the complex problems such as nested for loops and arrays. .",
          "url": "https://calissat.github.io/ws/blog2/",
          "relUrl": "/blog2/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Updating",
          "content": ". World Population . | .",
          "url": "https://calissat.github.io/ws/updating/",
          "relUrl": "/updating/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Java Labs",
          "content": "Menu | Conditionals | Primitives | Arrays | Fibonacci | .",
          "url": "https://calissat.github.io/ws/javaLabs/",
          "relUrl": "/javaLabs/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Notes",
          "content": "Capture Information Plan: . This is where I will store most of my general notes. If there is specific information either college board or PBL, I will label it by unit or lab. . Some Key Terms in Java: . The main method is where the program starts running. | Objects are an instance of a class. Objects can have attributes. For instance, a Student object might have name and grade as attributes. | A class is a programmer defined blueprint from which objects are created. Ex: Class is ClubMember Attributes: Name, grade | . | . | A parameter is a variable in the method/constructor signature that defines the type of value to receive when the method or constructor is called. | An argument is a value passed to a method or constructor when the method or constructor is called. | Super class is a class that can be extended to create subclasses | Subclass is a class that extends a superclass and inherits its attributes and behaviors | Inheritence is an OOP principle where a subclass inherits the attributes nad behaviors of a superclass | Concatenation is joining two strings together | . 8/30 Using Objects . Public means availible everywhere | Final means that its not going anywhere | myPainter.move(); (.) notation means that you’re using objects | Refrencing data property or refrencing method | myPainter is object | .move(); is a method | . | . Unit 6 Inheritence . Instantiate an object . ClassName objectName = new ClassName(); // example PainterPlus myPainterPlus = new PainterPlus(); . Creating a subclass . public class Subclass extends SuperClass { public Subclass() { super(); } } . Unit 7 Writing a Method . . public class PainterPlus extends Painter{ public PainterPlus(){ super(); } public void turnRight(){ turnLeft(); turnLeft(); turnLeft(); } } . //Unit 9 While Loops Control Structure: A conditional or iteration statement which affects the flow of a program . . //Unit 10 Two Way Selection Logical Operators . Put in front of condition | . NOT (!) - Returns opposite of operand . public void moveOrTakePaint(){ while (canMove()) if (!isOnBucket()){ move(); } else takePaint(); } . Array List . Arrays are used when you have a collection of the same type of elements Ex: array of numbers, string array | . | Arrays have a fixed size | ArrayLists don’t have a fixed size, can change their size | . Unit 01 Primitive Types . . Java Type Casting . Widening Casting (automatically): converting a smaller type to a larger type size byte -&gt; short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double . Narrowing Casting (manually): converting a larger type to a smaller size type double -&gt; float -&gt; long -&gt; int -&gt; char -&gt; short -&gt; byte . Java Operators . . Incrementing and Decrementing: ++ or – . Unit 02 Using Objects . OOP (Object Oriented Programming): A programming paradigm that organizes software design around objects. . . Classes: Templates/blueprints from which objects are creaeted. Objects under the same class with share common methods/attributes . Ex: Class fruit can have the objects apple, bananas, and orange Ex: Class attributes (inherited by objects) could be calorie count, quantity, etc . Objects: Instances of a class . Ex: Painter myPainter = new Painter(); . Methods: Functions that perform a specific task . Ex: Methods of the class could be store, cosume, etc . . Unit 03 Boolean Expressions and If Statements . Boolean Expressions: true or false . Conditional Statements: Perform condition depending if it is true or false . . Else if: Adds conditions to if-else statements . Compound Boolean Expressions: . Nested if statements: if statements within if statements | Logical operators: &amp;&amp; and |   | or ! not | . | Short-circuited evaluations: Knowing the result of a compound boolean just by glancing at the expressions | De-Morgan’s law !(a &amp;&amp; b) = (!a || !b) !(a || b) = (!a &amp;&amp; !b) . | . Comparing Objects . == compare two object refrences are aliases for the same object | .equals() sees if the attributes of two objects are the same | . Unit 04 Iteration . While Loops . //example 1 int x = 5; // The boolean expression in this case is x &gt; 0 while (x &gt; 0) { System.out.println(x); x--; } //example 2 int[] array = {3, 7, 0, 2, 4, 5, 9, 1, 3, 6, 3}; int total = 0; int i = 0; while (i &lt; array.length) { total += array[i]; i++; } System.out.println(total); . For Loops . //format for (initialize; test condition; change) { loop body } . //example 1 for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . Loops and Strings . String name = &quot;CodeCodeCode&quot;; for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . Nested Iteration . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . For Each Loops . //format for(dataType item : array) { ... } . //example 1 public class ForEachLoops { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } . Unit 05 Writing Classes . . // Basic Java Class public class Snack { // class name always starts with capital letter /* * Instance variables * Always declared right after class declaration * Declared with TYPE and NAME */ private String name; private int calories; // constructor public Snack(String n, int c){ name = n; calories = c; } // methods public String getName(){ // accessor return name; } public void setName(String n){ // mutator name = n; } // main method public static void main(String[] args) { Snack one = new Snack(&quot;Oreos&quot;, 100); System.out.println(one.getName()); } } Snack.main(null); . Class: blueprint used to create objects . Instance variables | Constructors | Methods Accessors/getters | Mutator/Setters | Main method (tester) | . | . Objects: instances of a class . Access Modifiers . Public: no restricted access (Classes, constructors) | Private: restrict access to declaring calss (instance variables) | Methods can be public or private | . Data Encapsulation . Data can be accessible, modifiable, both, or neither | Variables and methods are wrapped in a class | . Constructors . Initialize instance variables when an object is created | Object state: Attributes of an object and their values at a given time | .",
          "url": "https://calissat.github.io/ws/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://calissat.github.io/ws/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}